
Makersan_Buton_Okuma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014c4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001584  08001584  00002584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080015b4  080015b4  00003014  2**0
                  CONTENTS
  4 .ARM          00000000  080015b4  080015b4  00003014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080015b4  080015b4  00003014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015b4  080015b4  000025b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080015b8  080015b8  000025b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080015bc  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000014  080015d0  00003014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000044  080015d0  00003044  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00003014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002852  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ebc  00000000  00000000  0000588e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000360  00000000  00000000  00006750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000267  00000000  00000000  00006ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010112  00000000  00000000  00006d17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004b6c  00000000  00000000  00016e29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000606a0  00000000  00000000  0001b995  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0007c035  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a3c  00000000  00000000  0007c078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0007cab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800156c 	.word	0x0800156c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	0800156c 	.word	0x0800156c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  uint8_t btn = 0;
 8000226:	1dfb      	adds	r3, r7, #7
 8000228:	2200      	movs	r2, #0
 800022a:	701a      	strb	r2, [r3, #0]
  for (btn = 0; btn < BUTTON_COUNT; btn++)
 800022c:	1dfb      	adds	r3, r7, #7
 800022e:	2200      	movs	r2, #0
 8000230:	701a      	strb	r2, [r3, #0]
 8000232:	e014      	b.n	800025e <main+0x3e>
  {
	  Button_Pressed[btn] = 0;
 8000234:	1dfb      	adds	r3, r7, #7
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	4a46      	ldr	r2, [pc, #280]	@ (8000354 <main+0x134>)
 800023a:	2100      	movs	r1, #0
 800023c:	54d1      	strb	r1, [r2, r3]
  	  Button_State[btn] = RESET;
 800023e:	1dfb      	adds	r3, r7, #7
 8000240:	781b      	ldrb	r3, [r3, #0]
 8000242:	4a45      	ldr	r2, [pc, #276]	@ (8000358 <main+0x138>)
 8000244:	2100      	movs	r1, #0
 8000246:	54d1      	strb	r1, [r2, r3]
	  Debouncing_Counter[btn] = 0;
 8000248:	1dfb      	adds	r3, r7, #7
 800024a:	781a      	ldrb	r2, [r3, #0]
 800024c:	4b43      	ldr	r3, [pc, #268]	@ (800035c <main+0x13c>)
 800024e:	0052      	lsls	r2, r2, #1
 8000250:	2100      	movs	r1, #0
 8000252:	52d1      	strh	r1, [r2, r3]
  for (btn = 0; btn < BUTTON_COUNT; btn++)
 8000254:	1dfb      	adds	r3, r7, #7
 8000256:	781a      	ldrb	r2, [r3, #0]
 8000258:	1dfb      	adds	r3, r7, #7
 800025a:	3201      	adds	r2, #1
 800025c:	701a      	strb	r2, [r3, #0]
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b03      	cmp	r3, #3
 8000264:	d9e6      	bls.n	8000234 <main+0x14>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000266:	f000 fa0f 	bl	8000688 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800026a:	f000 f87d 	bl	8000368 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800026e:	f000 f8c5 	bl	80003fc <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for (btn=0; btn< BUTTON_COUNT;btn++)
 8000272:	1dfb      	adds	r3, r7, #7
 8000274:	2200      	movs	r2, #0
 8000276:	701a      	strb	r2, [r3, #0]
 8000278:	e047      	b.n	800030a <main+0xea>
	  {
		  if ((Button_Pressed[btn] == 1) && (Debouncing_Counter[btn] == 0))	// Eğer butona basılmışsa ve debouncing süresi dolmuşsa
 800027a:	1dfb      	adds	r3, r7, #7
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	4a35      	ldr	r2, [pc, #212]	@ (8000354 <main+0x134>)
 8000280:	5cd3      	ldrb	r3, [r2, r3]
 8000282:	b2db      	uxtb	r3, r3
 8000284:	2b01      	cmp	r3, #1
 8000286:	d11e      	bne.n	80002c6 <main+0xa6>
 8000288:	1dfb      	adds	r3, r7, #7
 800028a:	781a      	ldrb	r2, [r3, #0]
 800028c:	4b33      	ldr	r3, [pc, #204]	@ (800035c <main+0x13c>)
 800028e:	0052      	lsls	r2, r2, #1
 8000290:	5ad3      	ldrh	r3, [r2, r3]
 8000292:	b29b      	uxth	r3, r3
 8000294:	2b00      	cmp	r3, #0
 8000296:	d116      	bne.n	80002c6 <main+0xa6>
		  {
			  Button_Pressed[btn] = 0;
 8000298:	1dfb      	adds	r3, r7, #7
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	4a2d      	ldr	r2, [pc, #180]	@ (8000354 <main+0x134>)
 800029e:	2100      	movs	r1, #0
 80002a0:	54d1      	strb	r1, [r2, r3]

			  if (HAL_GPIO_ReadPin(BUTTON_PORT, Button_Pins[btn]))	// Butonun hala basılı olup olmadığını kontrol et.
 80002a2:	1dfb      	adds	r3, r7, #7
 80002a4:	781a      	ldrb	r2, [r3, #0]
 80002a6:	4b2e      	ldr	r3, [pc, #184]	@ (8000360 <main+0x140>)
 80002a8:	0052      	lsls	r2, r2, #1
 80002aa:	5ad3      	ldrh	r3, [r2, r3]
 80002ac:	4a2d      	ldr	r2, [pc, #180]	@ (8000364 <main+0x144>)
 80002ae:	0019      	movs	r1, r3
 80002b0:	0010      	movs	r0, r2
 80002b2:	f000 fc9b 	bl	8000bec <HAL_GPIO_ReadPin>
 80002b6:	1e03      	subs	r3, r0, #0
 80002b8:	d022      	beq.n	8000300 <main+0xe0>
			  {
				  Button_State[btn] = SET;							// Eğer buton hala basılıysa buton datasını SET yap.
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	4a26      	ldr	r2, [pc, #152]	@ (8000358 <main+0x138>)
 80002c0:	2101      	movs	r1, #1
 80002c2:	54d1      	strb	r1, [r2, r3]
			  if (HAL_GPIO_ReadPin(BUTTON_PORT, Button_Pins[btn]))	// Butonun hala basılı olup olmadığını kontrol et.
 80002c4:	e01c      	b.n	8000300 <main+0xe0>
			  }
		  }

		  else if (Button_State[btn] && HAL_GPIO_ReadPin(BUTTON_PORT, Button_Pins[btn]))	// Eğer debouncing süresi dolmuşsa ve hala butona basılıyorsa
 80002c6:	1dfb      	adds	r3, r7, #7
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	4a23      	ldr	r2, [pc, #140]	@ (8000358 <main+0x138>)
 80002cc:	5cd3      	ldrb	r3, [r2, r3]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d011      	beq.n	80002f6 <main+0xd6>
 80002d2:	1dfb      	adds	r3, r7, #7
 80002d4:	781a      	ldrb	r2, [r3, #0]
 80002d6:	4b22      	ldr	r3, [pc, #136]	@ (8000360 <main+0x140>)
 80002d8:	0052      	lsls	r2, r2, #1
 80002da:	5ad3      	ldrh	r3, [r2, r3]
 80002dc:	4a21      	ldr	r2, [pc, #132]	@ (8000364 <main+0x144>)
 80002de:	0019      	movs	r1, r3
 80002e0:	0010      	movs	r0, r2
 80002e2:	f000 fc83 	bl	8000bec <HAL_GPIO_ReadPin>
 80002e6:	1e03      	subs	r3, r0, #0
 80002e8:	d005      	beq.n	80002f6 <main+0xd6>
		  {
			  Button_State[btn] = SET;														// Buton datası SET olarak devam eder.
 80002ea:	1dfb      	adds	r3, r7, #7
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	4a1a      	ldr	r2, [pc, #104]	@ (8000358 <main+0x138>)
 80002f0:	2101      	movs	r1, #1
 80002f2:	54d1      	strb	r1, [r2, r3]
 80002f4:	e004      	b.n	8000300 <main+0xe0>
		  }

		  else 								// Eğer buton bırakılmışsa
		  {
			  Button_State[btn] = RESET;	// Buton datasını RESET yap.
 80002f6:	1dfb      	adds	r3, r7, #7
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	4a17      	ldr	r2, [pc, #92]	@ (8000358 <main+0x138>)
 80002fc:	2100      	movs	r1, #0
 80002fe:	54d1      	strb	r1, [r2, r3]
	  for (btn=0; btn< BUTTON_COUNT;btn++)
 8000300:	1dfb      	adds	r3, r7, #7
 8000302:	781a      	ldrb	r2, [r3, #0]
 8000304:	1dfb      	adds	r3, r7, #7
 8000306:	3201      	adds	r2, #1
 8000308:	701a      	strb	r2, [r3, #0]
 800030a:	1dfb      	adds	r3, r7, #7
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	2b03      	cmp	r3, #3
 8000310:	d9b3      	bls.n	800027a <main+0x5a>
		  }
	  }

	  HAL_GPIO_WritePin(LED_PORT, Led1_Pin, (GPIO_PinState)Button_State[0]);
 8000312:	4b11      	ldr	r3, [pc, #68]	@ (8000358 <main+0x138>)
 8000314:	781a      	ldrb	r2, [r3, #0]
 8000316:	2390      	movs	r3, #144	@ 0x90
 8000318:	05db      	lsls	r3, r3, #23
 800031a:	2110      	movs	r1, #16
 800031c:	0018      	movs	r0, r3
 800031e:	f000 fc82 	bl	8000c26 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_PORT, Led2_Pin, (GPIO_PinState)Button_State[1]);
 8000322:	4b0d      	ldr	r3, [pc, #52]	@ (8000358 <main+0x138>)
 8000324:	785a      	ldrb	r2, [r3, #1]
 8000326:	2390      	movs	r3, #144	@ 0x90
 8000328:	05db      	lsls	r3, r3, #23
 800032a:	2120      	movs	r1, #32
 800032c:	0018      	movs	r0, r3
 800032e:	f000 fc7a 	bl	8000c26 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_PORT, Led3_Pin, (GPIO_PinState)Button_State[2]);
 8000332:	4b09      	ldr	r3, [pc, #36]	@ (8000358 <main+0x138>)
 8000334:	789a      	ldrb	r2, [r3, #2]
 8000336:	2390      	movs	r3, #144	@ 0x90
 8000338:	05db      	lsls	r3, r3, #23
 800033a:	2140      	movs	r1, #64	@ 0x40
 800033c:	0018      	movs	r0, r3
 800033e:	f000 fc72 	bl	8000c26 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_PORT, Led4_Pin, (GPIO_PinState)Button_State[3]);
 8000342:	4b05      	ldr	r3, [pc, #20]	@ (8000358 <main+0x138>)
 8000344:	78da      	ldrb	r2, [r3, #3]
 8000346:	2390      	movs	r3, #144	@ 0x90
 8000348:	05db      	lsls	r3, r3, #23
 800034a:	2180      	movs	r1, #128	@ 0x80
 800034c:	0018      	movs	r0, r3
 800034e:	f000 fc6a 	bl	8000c26 <HAL_GPIO_WritePin>
	  for (btn=0; btn< BUTTON_COUNT;btn++)
 8000352:	e78e      	b.n	8000272 <main+0x52>
 8000354:	20000034 	.word	0x20000034
 8000358:	20000030 	.word	0x20000030
 800035c:	20000038 	.word	0x20000038
 8000360:	20000000 	.word	0x20000000
 8000364:	48000400 	.word	0x48000400

08000368 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000368:	b590      	push	{r4, r7, lr}
 800036a:	b091      	sub	sp, #68	@ 0x44
 800036c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800036e:	2410      	movs	r4, #16
 8000370:	193b      	adds	r3, r7, r4
 8000372:	0018      	movs	r0, r3
 8000374:	2330      	movs	r3, #48	@ 0x30
 8000376:	001a      	movs	r2, r3
 8000378:	2100      	movs	r1, #0
 800037a:	f001 f8cb 	bl	8001514 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800037e:	003b      	movs	r3, r7
 8000380:	0018      	movs	r0, r3
 8000382:	2310      	movs	r3, #16
 8000384:	001a      	movs	r2, r3
 8000386:	2100      	movs	r1, #0
 8000388:	f001 f8c4 	bl	8001514 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800038c:	0021      	movs	r1, r4
 800038e:	187b      	adds	r3, r7, r1
 8000390:	2202      	movs	r2, #2
 8000392:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000394:	187b      	adds	r3, r7, r1
 8000396:	2201      	movs	r2, #1
 8000398:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800039a:	187b      	adds	r3, r7, r1
 800039c:	2210      	movs	r2, #16
 800039e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003a0:	187b      	adds	r3, r7, r1
 80003a2:	2202      	movs	r2, #2
 80003a4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003a6:	187b      	adds	r3, r7, r1
 80003a8:	2200      	movs	r2, #0
 80003aa:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 80003ac:	187b      	adds	r3, r7, r1
 80003ae:	2280      	movs	r2, #128	@ 0x80
 80003b0:	0392      	lsls	r2, r2, #14
 80003b2:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80003b4:	187b      	adds	r3, r7, r1
 80003b6:	2200      	movs	r2, #0
 80003b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ba:	187b      	adds	r3, r7, r1
 80003bc:	0018      	movs	r0, r3
 80003be:	f000 fc6b 	bl	8000c98 <HAL_RCC_OscConfig>
 80003c2:	1e03      	subs	r3, r0, #0
 80003c4:	d001      	beq.n	80003ca <SystemClock_Config+0x62>
  {
    Error_Handler();
 80003c6:	f000 f8b5 	bl	8000534 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ca:	003b      	movs	r3, r7
 80003cc:	2207      	movs	r2, #7
 80003ce:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003d0:	003b      	movs	r3, r7
 80003d2:	2202      	movs	r2, #2
 80003d4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003d6:	003b      	movs	r3, r7
 80003d8:	2200      	movs	r2, #0
 80003da:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003dc:	003b      	movs	r3, r7
 80003de:	2200      	movs	r2, #0
 80003e0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003e2:	003b      	movs	r3, r7
 80003e4:	2101      	movs	r1, #1
 80003e6:	0018      	movs	r0, r3
 80003e8:	f000 ff70 	bl	80012cc <HAL_RCC_ClockConfig>
 80003ec:	1e03      	subs	r3, r0, #0
 80003ee:	d001      	beq.n	80003f4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80003f0:	f000 f8a0 	bl	8000534 <Error_Handler>
  }
}
 80003f4:	46c0      	nop			@ (mov r8, r8)
 80003f6:	46bd      	mov	sp, r7
 80003f8:	b011      	add	sp, #68	@ 0x44
 80003fa:	bd90      	pop	{r4, r7, pc}

080003fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003fc:	b590      	push	{r4, r7, lr}
 80003fe:	b089      	sub	sp, #36	@ 0x24
 8000400:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000402:	240c      	movs	r4, #12
 8000404:	193b      	adds	r3, r7, r4
 8000406:	0018      	movs	r0, r3
 8000408:	2314      	movs	r3, #20
 800040a:	001a      	movs	r2, r3
 800040c:	2100      	movs	r1, #0
 800040e:	f001 f881 	bl	8001514 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000412:	4b2a      	ldr	r3, [pc, #168]	@ (80004bc <MX_GPIO_Init+0xc0>)
 8000414:	695a      	ldr	r2, [r3, #20]
 8000416:	4b29      	ldr	r3, [pc, #164]	@ (80004bc <MX_GPIO_Init+0xc0>)
 8000418:	2180      	movs	r1, #128	@ 0x80
 800041a:	0289      	lsls	r1, r1, #10
 800041c:	430a      	orrs	r2, r1
 800041e:	615a      	str	r2, [r3, #20]
 8000420:	4b26      	ldr	r3, [pc, #152]	@ (80004bc <MX_GPIO_Init+0xc0>)
 8000422:	695a      	ldr	r2, [r3, #20]
 8000424:	2380      	movs	r3, #128	@ 0x80
 8000426:	029b      	lsls	r3, r3, #10
 8000428:	4013      	ands	r3, r2
 800042a:	60bb      	str	r3, [r7, #8]
 800042c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800042e:	4b23      	ldr	r3, [pc, #140]	@ (80004bc <MX_GPIO_Init+0xc0>)
 8000430:	695a      	ldr	r2, [r3, #20]
 8000432:	4b22      	ldr	r3, [pc, #136]	@ (80004bc <MX_GPIO_Init+0xc0>)
 8000434:	2180      	movs	r1, #128	@ 0x80
 8000436:	02c9      	lsls	r1, r1, #11
 8000438:	430a      	orrs	r2, r1
 800043a:	615a      	str	r2, [r3, #20]
 800043c:	4b1f      	ldr	r3, [pc, #124]	@ (80004bc <MX_GPIO_Init+0xc0>)
 800043e:	695a      	ldr	r2, [r3, #20]
 8000440:	2380      	movs	r3, #128	@ 0x80
 8000442:	02db      	lsls	r3, r3, #11
 8000444:	4013      	ands	r3, r2
 8000446:	607b      	str	r3, [r7, #4]
 8000448:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Led1_Pin|Led2_Pin|Led3_Pin|Led4_Pin, GPIO_PIN_RESET);
 800044a:	2390      	movs	r3, #144	@ 0x90
 800044c:	05db      	lsls	r3, r3, #23
 800044e:	2200      	movs	r2, #0
 8000450:	21f0      	movs	r1, #240	@ 0xf0
 8000452:	0018      	movs	r0, r3
 8000454:	f000 fbe7 	bl	8000c26 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Led1_Pin Led2_Pin Led3_Pin Led4_Pin */
  GPIO_InitStruct.Pin = Led1_Pin|Led2_Pin|Led3_Pin|Led4_Pin;
 8000458:	193b      	adds	r3, r7, r4
 800045a:	22f0      	movs	r2, #240	@ 0xf0
 800045c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800045e:	193b      	adds	r3, r7, r4
 8000460:	2201      	movs	r2, #1
 8000462:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000464:	193b      	adds	r3, r7, r4
 8000466:	2200      	movs	r2, #0
 8000468:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800046a:	193b      	adds	r3, r7, r4
 800046c:	2200      	movs	r2, #0
 800046e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000470:	193a      	adds	r2, r7, r4
 8000472:	2390      	movs	r3, #144	@ 0x90
 8000474:	05db      	lsls	r3, r3, #23
 8000476:	0011      	movs	r1, r2
 8000478:	0018      	movs	r0, r3
 800047a:	f000 fa47 	bl	800090c <HAL_GPIO_Init>

  /*Configure GPIO pins : Buton1_Pin Buton2_Pin Buton3_Pin Buton4_Pin */
  GPIO_InitStruct.Pin = Buton1_Pin|Buton2_Pin|Buton3_Pin|Buton4_Pin;
 800047e:	0021      	movs	r1, r4
 8000480:	187b      	adds	r3, r7, r1
 8000482:	22f0      	movs	r2, #240	@ 0xf0
 8000484:	0212      	lsls	r2, r2, #8
 8000486:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000488:	187b      	adds	r3, r7, r1
 800048a:	2288      	movs	r2, #136	@ 0x88
 800048c:	0352      	lsls	r2, r2, #13
 800048e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000490:	187b      	adds	r3, r7, r1
 8000492:	2202      	movs	r2, #2
 8000494:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000496:	187b      	adds	r3, r7, r1
 8000498:	4a09      	ldr	r2, [pc, #36]	@ (80004c0 <MX_GPIO_Init+0xc4>)
 800049a:	0019      	movs	r1, r3
 800049c:	0010      	movs	r0, r2
 800049e:	f000 fa35 	bl	800090c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80004a2:	2200      	movs	r2, #0
 80004a4:	2100      	movs	r1, #0
 80004a6:	2007      	movs	r0, #7
 80004a8:	f000 f9fe 	bl	80008a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80004ac:	2007      	movs	r0, #7
 80004ae:	f000 fa10 	bl	80008d2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004b2:	46c0      	nop			@ (mov r8, r8)
 80004b4:	46bd      	mov	sp, r7
 80004b6:	b009      	add	sp, #36	@ 0x24
 80004b8:	bd90      	pop	{r4, r7, pc}
 80004ba:	46c0      	nop			@ (mov r8, r8)
 80004bc:	40021000 	.word	0x40021000
 80004c0:	48000400 	.word	0x48000400

080004c4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	0002      	movs	r2, r0
 80004cc:	1dbb      	adds	r3, r7, #6
 80004ce:	801a      	strh	r2, [r3, #0]
	for (uint8_t btn = 0; btn < BUTTON_COUNT; btn++)
 80004d0:	230f      	movs	r3, #15
 80004d2:	18fb      	adds	r3, r7, r3
 80004d4:	2200      	movs	r2, #0
 80004d6:	701a      	strb	r2, [r3, #0]
 80004d8:	e01b      	b.n	8000512 <HAL_GPIO_EXTI_Callback+0x4e>
	{
		if (Button_Pins[btn] == GPIO_Pin)
 80004da:	210f      	movs	r1, #15
 80004dc:	187b      	adds	r3, r7, r1
 80004de:	781a      	ldrb	r2, [r3, #0]
 80004e0:	4b11      	ldr	r3, [pc, #68]	@ (8000528 <HAL_GPIO_EXTI_Callback+0x64>)
 80004e2:	0052      	lsls	r2, r2, #1
 80004e4:	5ad3      	ldrh	r3, [r2, r3]
 80004e6:	1dba      	adds	r2, r7, #6
 80004e8:	8812      	ldrh	r2, [r2, #0]
 80004ea:	429a      	cmp	r2, r3
 80004ec:	d10b      	bne.n	8000506 <HAL_GPIO_EXTI_Callback+0x42>
		{
			Button_Pressed[btn] = 1;
 80004ee:	0008      	movs	r0, r1
 80004f0:	187b      	adds	r3, r7, r1
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	4a0d      	ldr	r2, [pc, #52]	@ (800052c <HAL_GPIO_EXTI_Callback+0x68>)
 80004f6:	2101      	movs	r1, #1
 80004f8:	54d1      	strb	r1, [r2, r3]
			Debouncing_Counter[btn] = DEBOUNCING_TIME_MS;
 80004fa:	183b      	adds	r3, r7, r0
 80004fc:	781a      	ldrb	r2, [r3, #0]
 80004fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000530 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000500:	0052      	lsls	r2, r2, #1
 8000502:	211e      	movs	r1, #30
 8000504:	52d1      	strh	r1, [r2, r3]
	for (uint8_t btn = 0; btn < BUTTON_COUNT; btn++)
 8000506:	210f      	movs	r1, #15
 8000508:	187b      	adds	r3, r7, r1
 800050a:	781a      	ldrb	r2, [r3, #0]
 800050c:	187b      	adds	r3, r7, r1
 800050e:	3201      	adds	r2, #1
 8000510:	701a      	strb	r2, [r3, #0]
 8000512:	230f      	movs	r3, #15
 8000514:	18fb      	adds	r3, r7, r3
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	2b03      	cmp	r3, #3
 800051a:	d9de      	bls.n	80004da <HAL_GPIO_EXTI_Callback+0x16>
		}
	}
}
 800051c:	46c0      	nop			@ (mov r8, r8)
 800051e:	46c0      	nop			@ (mov r8, r8)
 8000520:	46bd      	mov	sp, r7
 8000522:	b004      	add	sp, #16
 8000524:	bd80      	pop	{r7, pc}
 8000526:	46c0      	nop			@ (mov r8, r8)
 8000528:	20000000 	.word	0x20000000
 800052c:	20000034 	.word	0x20000034
 8000530:	20000038 	.word	0x20000038

08000534 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000538:	b672      	cpsid	i
}
 800053a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800053c:	46c0      	nop			@ (mov r8, r8)
 800053e:	e7fd      	b.n	800053c <Error_Handler+0x8>

08000540 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000546:	4b0f      	ldr	r3, [pc, #60]	@ (8000584 <HAL_MspInit+0x44>)
 8000548:	699a      	ldr	r2, [r3, #24]
 800054a:	4b0e      	ldr	r3, [pc, #56]	@ (8000584 <HAL_MspInit+0x44>)
 800054c:	2101      	movs	r1, #1
 800054e:	430a      	orrs	r2, r1
 8000550:	619a      	str	r2, [r3, #24]
 8000552:	4b0c      	ldr	r3, [pc, #48]	@ (8000584 <HAL_MspInit+0x44>)
 8000554:	699b      	ldr	r3, [r3, #24]
 8000556:	2201      	movs	r2, #1
 8000558:	4013      	ands	r3, r2
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800055e:	4b09      	ldr	r3, [pc, #36]	@ (8000584 <HAL_MspInit+0x44>)
 8000560:	69da      	ldr	r2, [r3, #28]
 8000562:	4b08      	ldr	r3, [pc, #32]	@ (8000584 <HAL_MspInit+0x44>)
 8000564:	2180      	movs	r1, #128	@ 0x80
 8000566:	0549      	lsls	r1, r1, #21
 8000568:	430a      	orrs	r2, r1
 800056a:	61da      	str	r2, [r3, #28]
 800056c:	4b05      	ldr	r3, [pc, #20]	@ (8000584 <HAL_MspInit+0x44>)
 800056e:	69da      	ldr	r2, [r3, #28]
 8000570:	2380      	movs	r3, #128	@ 0x80
 8000572:	055b      	lsls	r3, r3, #21
 8000574:	4013      	ands	r3, r2
 8000576:	603b      	str	r3, [r7, #0]
 8000578:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800057a:	46c0      	nop			@ (mov r8, r8)
 800057c:	46bd      	mov	sp, r7
 800057e:	b002      	add	sp, #8
 8000580:	bd80      	pop	{r7, pc}
 8000582:	46c0      	nop			@ (mov r8, r8)
 8000584:	40021000 	.word	0x40021000

08000588 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800058c:	46c0      	nop			@ (mov r8, r8)
 800058e:	e7fd      	b.n	800058c <NMI_Handler+0x4>

08000590 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000594:	46c0      	nop			@ (mov r8, r8)
 8000596:	e7fd      	b.n	8000594 <HardFault_Handler+0x4>

08000598 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800059c:	46c0      	nop			@ (mov r8, r8)
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}

080005a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005a2:	b580      	push	{r7, lr}
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005a6:	46c0      	nop			@ (mov r8, r8)
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}

080005ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005b2:	f000 f8b1 	bl	8000718 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  for (uint8_t btn = 0; btn < BUTTON_COUNT; btn++)
 80005b6:	1dfb      	adds	r3, r7, #7
 80005b8:	2200      	movs	r2, #0
 80005ba:	701a      	strb	r2, [r3, #0]
 80005bc:	e011      	b.n	80005e2 <SysTick_Handler+0x36>
	  Debouncing_Counter[btn] -= 1;
 80005be:	1dfb      	adds	r3, r7, #7
 80005c0:	781a      	ldrb	r2, [r3, #0]
 80005c2:	4b0c      	ldr	r3, [pc, #48]	@ (80005f4 <SysTick_Handler+0x48>)
 80005c4:	0052      	lsls	r2, r2, #1
 80005c6:	5ad3      	ldrh	r3, [r2, r3]
 80005c8:	b29b      	uxth	r3, r3
 80005ca:	1dfa      	adds	r2, r7, #7
 80005cc:	7812      	ldrb	r2, [r2, #0]
 80005ce:	3b01      	subs	r3, #1
 80005d0:	b299      	uxth	r1, r3
 80005d2:	4b08      	ldr	r3, [pc, #32]	@ (80005f4 <SysTick_Handler+0x48>)
 80005d4:	0052      	lsls	r2, r2, #1
 80005d6:	52d1      	strh	r1, [r2, r3]
  for (uint8_t btn = 0; btn < BUTTON_COUNT; btn++)
 80005d8:	1dfb      	adds	r3, r7, #7
 80005da:	781a      	ldrb	r2, [r3, #0]
 80005dc:	1dfb      	adds	r3, r7, #7
 80005de:	3201      	adds	r2, #1
 80005e0:	701a      	strb	r2, [r3, #0]
 80005e2:	1dfb      	adds	r3, r7, #7
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b03      	cmp	r3, #3
 80005e8:	d9e9      	bls.n	80005be <SysTick_Handler+0x12>
  /* USER CODE END SysTick_IRQn 1 */
}
 80005ea:	46c0      	nop			@ (mov r8, r8)
 80005ec:	46c0      	nop			@ (mov r8, r8)
 80005ee:	46bd      	mov	sp, r7
 80005f0:	b002      	add	sp, #8
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000038 	.word	0x20000038

080005f8 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Buton1_Pin);
 80005fc:	2380      	movs	r3, #128	@ 0x80
 80005fe:	015b      	lsls	r3, r3, #5
 8000600:	0018      	movs	r0, r3
 8000602:	f000 fb2d 	bl	8000c60 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Buton2_Pin);
 8000606:	2380      	movs	r3, #128	@ 0x80
 8000608:	019b      	lsls	r3, r3, #6
 800060a:	0018      	movs	r0, r3
 800060c:	f000 fb28 	bl	8000c60 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Buton3_Pin);
 8000610:	2380      	movs	r3, #128	@ 0x80
 8000612:	01db      	lsls	r3, r3, #7
 8000614:	0018      	movs	r0, r3
 8000616:	f000 fb23 	bl	8000c60 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Buton4_Pin);
 800061a:	2380      	movs	r3, #128	@ 0x80
 800061c:	021b      	lsls	r3, r3, #8
 800061e:	0018      	movs	r0, r3
 8000620:	f000 fb1e 	bl	8000c60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000624:	46c0      	nop			@ (mov r8, r8)
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}

0800062a <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800062a:	b580      	push	{r7, lr}
 800062c:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800062e:	46c0      	nop			@ (mov r8, r8)
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000634:	480d      	ldr	r0, [pc, #52]	@ (800066c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000636:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 8000638:	f7ff fff7 	bl	800062a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800063c:	480c      	ldr	r0, [pc, #48]	@ (8000670 <LoopForever+0x6>)
  ldr r1, =_edata
 800063e:	490d      	ldr	r1, [pc, #52]	@ (8000674 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000640:	4a0d      	ldr	r2, [pc, #52]	@ (8000678 <LoopForever+0xe>)
  movs r3, #0
 8000642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000644:	e002      	b.n	800064c <LoopCopyDataInit>

08000646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800064a:	3304      	adds	r3, #4

0800064c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800064c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800064e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000650:	d3f9      	bcc.n	8000646 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000652:	4a0a      	ldr	r2, [pc, #40]	@ (800067c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000654:	4c0a      	ldr	r4, [pc, #40]	@ (8000680 <LoopForever+0x16>)
  movs r3, #0
 8000656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000658:	e001      	b.n	800065e <LoopFillZerobss>

0800065a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800065a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800065c:	3204      	adds	r2, #4

0800065e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800065e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000660:	d3fb      	bcc.n	800065a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000662:	f000 ff5f 	bl	8001524 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000666:	f7ff fddb 	bl	8000220 <main>

0800066a <LoopForever>:

LoopForever:
    b LoopForever
 800066a:	e7fe      	b.n	800066a <LoopForever>
  ldr   r0, =_estack
 800066c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000674:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000678:	080015bc 	.word	0x080015bc
  ldr r2, =_sbss
 800067c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000680:	20000044 	.word	0x20000044

08000684 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000684:	e7fe      	b.n	8000684 <ADC1_COMP_IRQHandler>
	...

08000688 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800068c:	4b07      	ldr	r3, [pc, #28]	@ (80006ac <HAL_Init+0x24>)
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	4b06      	ldr	r3, [pc, #24]	@ (80006ac <HAL_Init+0x24>)
 8000692:	2110      	movs	r1, #16
 8000694:	430a      	orrs	r2, r1
 8000696:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000698:	2003      	movs	r0, #3
 800069a:	f000 f809 	bl	80006b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800069e:	f7ff ff4f 	bl	8000540 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006a2:	2300      	movs	r3, #0
}
 80006a4:	0018      	movs	r0, r3
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	46c0      	nop			@ (mov r8, r8)
 80006ac:	40022000 	.word	0x40022000

080006b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006b0:	b590      	push	{r4, r7, lr}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006b8:	4b14      	ldr	r3, [pc, #80]	@ (800070c <HAL_InitTick+0x5c>)
 80006ba:	681c      	ldr	r4, [r3, #0]
 80006bc:	4b14      	ldr	r3, [pc, #80]	@ (8000710 <HAL_InitTick+0x60>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	0019      	movs	r1, r3
 80006c2:	23fa      	movs	r3, #250	@ 0xfa
 80006c4:	0098      	lsls	r0, r3, #2
 80006c6:	f7ff fd1f 	bl	8000108 <__udivsi3>
 80006ca:	0003      	movs	r3, r0
 80006cc:	0019      	movs	r1, r3
 80006ce:	0020      	movs	r0, r4
 80006d0:	f7ff fd1a 	bl	8000108 <__udivsi3>
 80006d4:	0003      	movs	r3, r0
 80006d6:	0018      	movs	r0, r3
 80006d8:	f000 f90b 	bl	80008f2 <HAL_SYSTICK_Config>
 80006dc:	1e03      	subs	r3, r0, #0
 80006de:	d001      	beq.n	80006e4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80006e0:	2301      	movs	r3, #1
 80006e2:	e00f      	b.n	8000704 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2b03      	cmp	r3, #3
 80006e8:	d80b      	bhi.n	8000702 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006ea:	6879      	ldr	r1, [r7, #4]
 80006ec:	2301      	movs	r3, #1
 80006ee:	425b      	negs	r3, r3
 80006f0:	2200      	movs	r2, #0
 80006f2:	0018      	movs	r0, r3
 80006f4:	f000 f8d8 	bl	80008a8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006f8:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <HAL_InitTick+0x64>)
 80006fa:	687a      	ldr	r2, [r7, #4]
 80006fc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80006fe:	2300      	movs	r3, #0
 8000700:	e000      	b.n	8000704 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000702:	2301      	movs	r3, #1
}
 8000704:	0018      	movs	r0, r3
 8000706:	46bd      	mov	sp, r7
 8000708:	b003      	add	sp, #12
 800070a:	bd90      	pop	{r4, r7, pc}
 800070c:	20000008 	.word	0x20000008
 8000710:	20000010 	.word	0x20000010
 8000714:	2000000c 	.word	0x2000000c

08000718 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800071c:	4b05      	ldr	r3, [pc, #20]	@ (8000734 <HAL_IncTick+0x1c>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	001a      	movs	r2, r3
 8000722:	4b05      	ldr	r3, [pc, #20]	@ (8000738 <HAL_IncTick+0x20>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	18d2      	adds	r2, r2, r3
 8000728:	4b03      	ldr	r3, [pc, #12]	@ (8000738 <HAL_IncTick+0x20>)
 800072a:	601a      	str	r2, [r3, #0]
}
 800072c:	46c0      	nop			@ (mov r8, r8)
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	46c0      	nop			@ (mov r8, r8)
 8000734:	20000010 	.word	0x20000010
 8000738:	20000040 	.word	0x20000040

0800073c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  return uwTick;
 8000740:	4b02      	ldr	r3, [pc, #8]	@ (800074c <HAL_GetTick+0x10>)
 8000742:	681b      	ldr	r3, [r3, #0]
}
 8000744:	0018      	movs	r0, r3
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	46c0      	nop			@ (mov r8, r8)
 800074c:	20000040 	.word	0x20000040

08000750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	0002      	movs	r2, r0
 8000758:	1dfb      	adds	r3, r7, #7
 800075a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800075c:	1dfb      	adds	r3, r7, #7
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b7f      	cmp	r3, #127	@ 0x7f
 8000762:	d809      	bhi.n	8000778 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000764:	1dfb      	adds	r3, r7, #7
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	001a      	movs	r2, r3
 800076a:	231f      	movs	r3, #31
 800076c:	401a      	ands	r2, r3
 800076e:	4b04      	ldr	r3, [pc, #16]	@ (8000780 <__NVIC_EnableIRQ+0x30>)
 8000770:	2101      	movs	r1, #1
 8000772:	4091      	lsls	r1, r2
 8000774:	000a      	movs	r2, r1
 8000776:	601a      	str	r2, [r3, #0]
  }
}
 8000778:	46c0      	nop			@ (mov r8, r8)
 800077a:	46bd      	mov	sp, r7
 800077c:	b002      	add	sp, #8
 800077e:	bd80      	pop	{r7, pc}
 8000780:	e000e100 	.word	0xe000e100

08000784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000784:	b590      	push	{r4, r7, lr}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	0002      	movs	r2, r0
 800078c:	6039      	str	r1, [r7, #0]
 800078e:	1dfb      	adds	r3, r7, #7
 8000790:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000792:	1dfb      	adds	r3, r7, #7
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	2b7f      	cmp	r3, #127	@ 0x7f
 8000798:	d828      	bhi.n	80007ec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800079a:	4a2f      	ldr	r2, [pc, #188]	@ (8000858 <__NVIC_SetPriority+0xd4>)
 800079c:	1dfb      	adds	r3, r7, #7
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	b25b      	sxtb	r3, r3
 80007a2:	089b      	lsrs	r3, r3, #2
 80007a4:	33c0      	adds	r3, #192	@ 0xc0
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	589b      	ldr	r3, [r3, r2]
 80007aa:	1dfa      	adds	r2, r7, #7
 80007ac:	7812      	ldrb	r2, [r2, #0]
 80007ae:	0011      	movs	r1, r2
 80007b0:	2203      	movs	r2, #3
 80007b2:	400a      	ands	r2, r1
 80007b4:	00d2      	lsls	r2, r2, #3
 80007b6:	21ff      	movs	r1, #255	@ 0xff
 80007b8:	4091      	lsls	r1, r2
 80007ba:	000a      	movs	r2, r1
 80007bc:	43d2      	mvns	r2, r2
 80007be:	401a      	ands	r2, r3
 80007c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	019b      	lsls	r3, r3, #6
 80007c6:	22ff      	movs	r2, #255	@ 0xff
 80007c8:	401a      	ands	r2, r3
 80007ca:	1dfb      	adds	r3, r7, #7
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	0018      	movs	r0, r3
 80007d0:	2303      	movs	r3, #3
 80007d2:	4003      	ands	r3, r0
 80007d4:	00db      	lsls	r3, r3, #3
 80007d6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007d8:	481f      	ldr	r0, [pc, #124]	@ (8000858 <__NVIC_SetPriority+0xd4>)
 80007da:	1dfb      	adds	r3, r7, #7
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	b25b      	sxtb	r3, r3
 80007e0:	089b      	lsrs	r3, r3, #2
 80007e2:	430a      	orrs	r2, r1
 80007e4:	33c0      	adds	r3, #192	@ 0xc0
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80007ea:	e031      	b.n	8000850 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007ec:	4a1b      	ldr	r2, [pc, #108]	@ (800085c <__NVIC_SetPriority+0xd8>)
 80007ee:	1dfb      	adds	r3, r7, #7
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	0019      	movs	r1, r3
 80007f4:	230f      	movs	r3, #15
 80007f6:	400b      	ands	r3, r1
 80007f8:	3b08      	subs	r3, #8
 80007fa:	089b      	lsrs	r3, r3, #2
 80007fc:	3306      	adds	r3, #6
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	18d3      	adds	r3, r2, r3
 8000802:	3304      	adds	r3, #4
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	1dfa      	adds	r2, r7, #7
 8000808:	7812      	ldrb	r2, [r2, #0]
 800080a:	0011      	movs	r1, r2
 800080c:	2203      	movs	r2, #3
 800080e:	400a      	ands	r2, r1
 8000810:	00d2      	lsls	r2, r2, #3
 8000812:	21ff      	movs	r1, #255	@ 0xff
 8000814:	4091      	lsls	r1, r2
 8000816:	000a      	movs	r2, r1
 8000818:	43d2      	mvns	r2, r2
 800081a:	401a      	ands	r2, r3
 800081c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	019b      	lsls	r3, r3, #6
 8000822:	22ff      	movs	r2, #255	@ 0xff
 8000824:	401a      	ands	r2, r3
 8000826:	1dfb      	adds	r3, r7, #7
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	0018      	movs	r0, r3
 800082c:	2303      	movs	r3, #3
 800082e:	4003      	ands	r3, r0
 8000830:	00db      	lsls	r3, r3, #3
 8000832:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000834:	4809      	ldr	r0, [pc, #36]	@ (800085c <__NVIC_SetPriority+0xd8>)
 8000836:	1dfb      	adds	r3, r7, #7
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	001c      	movs	r4, r3
 800083c:	230f      	movs	r3, #15
 800083e:	4023      	ands	r3, r4
 8000840:	3b08      	subs	r3, #8
 8000842:	089b      	lsrs	r3, r3, #2
 8000844:	430a      	orrs	r2, r1
 8000846:	3306      	adds	r3, #6
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	18c3      	adds	r3, r0, r3
 800084c:	3304      	adds	r3, #4
 800084e:	601a      	str	r2, [r3, #0]
}
 8000850:	46c0      	nop			@ (mov r8, r8)
 8000852:	46bd      	mov	sp, r7
 8000854:	b003      	add	sp, #12
 8000856:	bd90      	pop	{r4, r7, pc}
 8000858:	e000e100 	.word	0xe000e100
 800085c:	e000ed00 	.word	0xe000ed00

08000860 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	1e5a      	subs	r2, r3, #1
 800086c:	2380      	movs	r3, #128	@ 0x80
 800086e:	045b      	lsls	r3, r3, #17
 8000870:	429a      	cmp	r2, r3
 8000872:	d301      	bcc.n	8000878 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000874:	2301      	movs	r3, #1
 8000876:	e010      	b.n	800089a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000878:	4b0a      	ldr	r3, [pc, #40]	@ (80008a4 <SysTick_Config+0x44>)
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	3a01      	subs	r2, #1
 800087e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000880:	2301      	movs	r3, #1
 8000882:	425b      	negs	r3, r3
 8000884:	2103      	movs	r1, #3
 8000886:	0018      	movs	r0, r3
 8000888:	f7ff ff7c 	bl	8000784 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800088c:	4b05      	ldr	r3, [pc, #20]	@ (80008a4 <SysTick_Config+0x44>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000892:	4b04      	ldr	r3, [pc, #16]	@ (80008a4 <SysTick_Config+0x44>)
 8000894:	2207      	movs	r2, #7
 8000896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000898:	2300      	movs	r3, #0
}
 800089a:	0018      	movs	r0, r3
 800089c:	46bd      	mov	sp, r7
 800089e:	b002      	add	sp, #8
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	46c0      	nop			@ (mov r8, r8)
 80008a4:	e000e010 	.word	0xe000e010

080008a8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	60b9      	str	r1, [r7, #8]
 80008b0:	607a      	str	r2, [r7, #4]
 80008b2:	210f      	movs	r1, #15
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	1c02      	adds	r2, r0, #0
 80008b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80008ba:	68ba      	ldr	r2, [r7, #8]
 80008bc:	187b      	adds	r3, r7, r1
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	b25b      	sxtb	r3, r3
 80008c2:	0011      	movs	r1, r2
 80008c4:	0018      	movs	r0, r3
 80008c6:	f7ff ff5d 	bl	8000784 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80008ca:	46c0      	nop			@ (mov r8, r8)
 80008cc:	46bd      	mov	sp, r7
 80008ce:	b004      	add	sp, #16
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b082      	sub	sp, #8
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	0002      	movs	r2, r0
 80008da:	1dfb      	adds	r3, r7, #7
 80008dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008de:	1dfb      	adds	r3, r7, #7
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	b25b      	sxtb	r3, r3
 80008e4:	0018      	movs	r0, r3
 80008e6:	f7ff ff33 	bl	8000750 <__NVIC_EnableIRQ>
}
 80008ea:	46c0      	nop			@ (mov r8, r8)
 80008ec:	46bd      	mov	sp, r7
 80008ee:	b002      	add	sp, #8
 80008f0:	bd80      	pop	{r7, pc}

080008f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	b082      	sub	sp, #8
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	0018      	movs	r0, r3
 80008fe:	f7ff ffaf 	bl	8000860 <SysTick_Config>
 8000902:	0003      	movs	r3, r0
}
 8000904:	0018      	movs	r0, r3
 8000906:	46bd      	mov	sp, r7
 8000908:	b002      	add	sp, #8
 800090a:	bd80      	pop	{r7, pc}

0800090c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b086      	sub	sp, #24
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000916:	2300      	movs	r3, #0
 8000918:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800091a:	e14f      	b.n	8000bbc <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2101      	movs	r1, #1
 8000922:	697a      	ldr	r2, [r7, #20]
 8000924:	4091      	lsls	r1, r2
 8000926:	000a      	movs	r2, r1
 8000928:	4013      	ands	r3, r2
 800092a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d100      	bne.n	8000934 <HAL_GPIO_Init+0x28>
 8000932:	e140      	b.n	8000bb6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	2203      	movs	r2, #3
 800093a:	4013      	ands	r3, r2
 800093c:	2b01      	cmp	r3, #1
 800093e:	d005      	beq.n	800094c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	2203      	movs	r2, #3
 8000946:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000948:	2b02      	cmp	r3, #2
 800094a:	d130      	bne.n	80009ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	689b      	ldr	r3, [r3, #8]
 8000950:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	2203      	movs	r2, #3
 8000958:	409a      	lsls	r2, r3
 800095a:	0013      	movs	r3, r2
 800095c:	43da      	mvns	r2, r3
 800095e:	693b      	ldr	r3, [r7, #16]
 8000960:	4013      	ands	r3, r2
 8000962:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	68da      	ldr	r2, [r3, #12]
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	409a      	lsls	r2, r3
 800096e:	0013      	movs	r3, r2
 8000970:	693a      	ldr	r2, [r7, #16]
 8000972:	4313      	orrs	r3, r2
 8000974:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	693a      	ldr	r2, [r7, #16]
 800097a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000982:	2201      	movs	r2, #1
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	409a      	lsls	r2, r3
 8000988:	0013      	movs	r3, r2
 800098a:	43da      	mvns	r2, r3
 800098c:	693b      	ldr	r3, [r7, #16]
 800098e:	4013      	ands	r3, r2
 8000990:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	091b      	lsrs	r3, r3, #4
 8000998:	2201      	movs	r2, #1
 800099a:	401a      	ands	r2, r3
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	409a      	lsls	r2, r3
 80009a0:	0013      	movs	r3, r2
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	4313      	orrs	r3, r2
 80009a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	2203      	movs	r2, #3
 80009b4:	4013      	ands	r3, r2
 80009b6:	2b03      	cmp	r3, #3
 80009b8:	d017      	beq.n	80009ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	68db      	ldr	r3, [r3, #12]
 80009be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	2203      	movs	r2, #3
 80009c6:	409a      	lsls	r2, r3
 80009c8:	0013      	movs	r3, r2
 80009ca:	43da      	mvns	r2, r3
 80009cc:	693b      	ldr	r3, [r7, #16]
 80009ce:	4013      	ands	r3, r2
 80009d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	689a      	ldr	r2, [r3, #8]
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	409a      	lsls	r2, r3
 80009dc:	0013      	movs	r3, r2
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	2203      	movs	r2, #3
 80009f0:	4013      	ands	r3, r2
 80009f2:	2b02      	cmp	r3, #2
 80009f4:	d123      	bne.n	8000a3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	08da      	lsrs	r2, r3, #3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	3208      	adds	r2, #8
 80009fe:	0092      	lsls	r2, r2, #2
 8000a00:	58d3      	ldr	r3, [r2, r3]
 8000a02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	2207      	movs	r2, #7
 8000a08:	4013      	ands	r3, r2
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	220f      	movs	r2, #15
 8000a0e:	409a      	lsls	r2, r3
 8000a10:	0013      	movs	r3, r2
 8000a12:	43da      	mvns	r2, r3
 8000a14:	693b      	ldr	r3, [r7, #16]
 8000a16:	4013      	ands	r3, r2
 8000a18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	691a      	ldr	r2, [r3, #16]
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	2107      	movs	r1, #7
 8000a22:	400b      	ands	r3, r1
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	409a      	lsls	r2, r3
 8000a28:	0013      	movs	r3, r2
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	08da      	lsrs	r2, r3, #3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3208      	adds	r2, #8
 8000a38:	0092      	lsls	r2, r2, #2
 8000a3a:	6939      	ldr	r1, [r7, #16]
 8000a3c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	2203      	movs	r2, #3
 8000a4a:	409a      	lsls	r2, r3
 8000a4c:	0013      	movs	r3, r2
 8000a4e:	43da      	mvns	r2, r3
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	4013      	ands	r3, r2
 8000a54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	2203      	movs	r2, #3
 8000a5c:	401a      	ands	r2, r3
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	409a      	lsls	r2, r3
 8000a64:	0013      	movs	r3, r2
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	685a      	ldr	r2, [r3, #4]
 8000a76:	23c0      	movs	r3, #192	@ 0xc0
 8000a78:	029b      	lsls	r3, r3, #10
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	d100      	bne.n	8000a80 <HAL_GPIO_Init+0x174>
 8000a7e:	e09a      	b.n	8000bb6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a80:	4b54      	ldr	r3, [pc, #336]	@ (8000bd4 <HAL_GPIO_Init+0x2c8>)
 8000a82:	699a      	ldr	r2, [r3, #24]
 8000a84:	4b53      	ldr	r3, [pc, #332]	@ (8000bd4 <HAL_GPIO_Init+0x2c8>)
 8000a86:	2101      	movs	r1, #1
 8000a88:	430a      	orrs	r2, r1
 8000a8a:	619a      	str	r2, [r3, #24]
 8000a8c:	4b51      	ldr	r3, [pc, #324]	@ (8000bd4 <HAL_GPIO_Init+0x2c8>)
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	2201      	movs	r2, #1
 8000a92:	4013      	ands	r3, r2
 8000a94:	60bb      	str	r3, [r7, #8]
 8000a96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a98:	4a4f      	ldr	r2, [pc, #316]	@ (8000bd8 <HAL_GPIO_Init+0x2cc>)
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	089b      	lsrs	r3, r3, #2
 8000a9e:	3302      	adds	r3, #2
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	589b      	ldr	r3, [r3, r2]
 8000aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	2203      	movs	r2, #3
 8000aaa:	4013      	ands	r3, r2
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	220f      	movs	r2, #15
 8000ab0:	409a      	lsls	r2, r3
 8000ab2:	0013      	movs	r3, r2
 8000ab4:	43da      	mvns	r2, r3
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	4013      	ands	r3, r2
 8000aba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000abc:	687a      	ldr	r2, [r7, #4]
 8000abe:	2390      	movs	r3, #144	@ 0x90
 8000ac0:	05db      	lsls	r3, r3, #23
 8000ac2:	429a      	cmp	r2, r3
 8000ac4:	d013      	beq.n	8000aee <HAL_GPIO_Init+0x1e2>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4a44      	ldr	r2, [pc, #272]	@ (8000bdc <HAL_GPIO_Init+0x2d0>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d00d      	beq.n	8000aea <HAL_GPIO_Init+0x1de>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4a43      	ldr	r2, [pc, #268]	@ (8000be0 <HAL_GPIO_Init+0x2d4>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d007      	beq.n	8000ae6 <HAL_GPIO_Init+0x1da>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4a42      	ldr	r2, [pc, #264]	@ (8000be4 <HAL_GPIO_Init+0x2d8>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d101      	bne.n	8000ae2 <HAL_GPIO_Init+0x1d6>
 8000ade:	2303      	movs	r3, #3
 8000ae0:	e006      	b.n	8000af0 <HAL_GPIO_Init+0x1e4>
 8000ae2:	2305      	movs	r3, #5
 8000ae4:	e004      	b.n	8000af0 <HAL_GPIO_Init+0x1e4>
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	e002      	b.n	8000af0 <HAL_GPIO_Init+0x1e4>
 8000aea:	2301      	movs	r3, #1
 8000aec:	e000      	b.n	8000af0 <HAL_GPIO_Init+0x1e4>
 8000aee:	2300      	movs	r3, #0
 8000af0:	697a      	ldr	r2, [r7, #20]
 8000af2:	2103      	movs	r1, #3
 8000af4:	400a      	ands	r2, r1
 8000af6:	0092      	lsls	r2, r2, #2
 8000af8:	4093      	lsls	r3, r2
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b00:	4935      	ldr	r1, [pc, #212]	@ (8000bd8 <HAL_GPIO_Init+0x2cc>)
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	089b      	lsrs	r3, r3, #2
 8000b06:	3302      	adds	r3, #2
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b0e:	4b36      	ldr	r3, [pc, #216]	@ (8000be8 <HAL_GPIO_Init+0x2dc>)
 8000b10:	689b      	ldr	r3, [r3, #8]
 8000b12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	43da      	mvns	r2, r3
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685a      	ldr	r2, [r3, #4]
 8000b22:	2380      	movs	r3, #128	@ 0x80
 8000b24:	035b      	lsls	r3, r3, #13
 8000b26:	4013      	ands	r3, r2
 8000b28:	d003      	beq.n	8000b32 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b32:	4b2d      	ldr	r3, [pc, #180]	@ (8000be8 <HAL_GPIO_Init+0x2dc>)
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000b38:	4b2b      	ldr	r3, [pc, #172]	@ (8000be8 <HAL_GPIO_Init+0x2dc>)
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	43da      	mvns	r2, r3
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	4013      	ands	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	685a      	ldr	r2, [r3, #4]
 8000b4c:	2380      	movs	r3, #128	@ 0x80
 8000b4e:	039b      	lsls	r3, r3, #14
 8000b50:	4013      	ands	r3, r2
 8000b52:	d003      	beq.n	8000b5c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b5c:	4b22      	ldr	r3, [pc, #136]	@ (8000be8 <HAL_GPIO_Init+0x2dc>)
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000b62:	4b21      	ldr	r3, [pc, #132]	@ (8000be8 <HAL_GPIO_Init+0x2dc>)
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	43da      	mvns	r2, r3
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	685a      	ldr	r2, [r3, #4]
 8000b76:	2380      	movs	r3, #128	@ 0x80
 8000b78:	029b      	lsls	r3, r3, #10
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	d003      	beq.n	8000b86 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	4313      	orrs	r3, r2
 8000b84:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b86:	4b18      	ldr	r3, [pc, #96]	@ (8000be8 <HAL_GPIO_Init+0x2dc>)
 8000b88:	693a      	ldr	r2, [r7, #16]
 8000b8a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000b8c:	4b16      	ldr	r3, [pc, #88]	@ (8000be8 <HAL_GPIO_Init+0x2dc>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	43da      	mvns	r2, r3
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	4013      	ands	r3, r2
 8000b9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	685a      	ldr	r2, [r3, #4]
 8000ba0:	2380      	movs	r3, #128	@ 0x80
 8000ba2:	025b      	lsls	r3, r3, #9
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	d003      	beq.n	8000bb0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000ba8:	693a      	ldr	r2, [r7, #16]
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000bb0:	4b0d      	ldr	r3, [pc, #52]	@ (8000be8 <HAL_GPIO_Init+0x2dc>)
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	40da      	lsrs	r2, r3
 8000bc4:	1e13      	subs	r3, r2, #0
 8000bc6:	d000      	beq.n	8000bca <HAL_GPIO_Init+0x2be>
 8000bc8:	e6a8      	b.n	800091c <HAL_GPIO_Init+0x10>
  } 
}
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	46c0      	nop			@ (mov r8, r8)
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	b006      	add	sp, #24
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	40010000 	.word	0x40010000
 8000bdc:	48000400 	.word	0x48000400
 8000be0:	48000800 	.word	0x48000800
 8000be4:	48000c00 	.word	0x48000c00
 8000be8:	40010400 	.word	0x40010400

08000bec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	000a      	movs	r2, r1
 8000bf6:	1cbb      	adds	r3, r7, #2
 8000bf8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	691b      	ldr	r3, [r3, #16]
 8000bfe:	1cba      	adds	r2, r7, #2
 8000c00:	8812      	ldrh	r2, [r2, #0]
 8000c02:	4013      	ands	r3, r2
 8000c04:	d004      	beq.n	8000c10 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000c06:	230f      	movs	r3, #15
 8000c08:	18fb      	adds	r3, r7, r3
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	701a      	strb	r2, [r3, #0]
 8000c0e:	e003      	b.n	8000c18 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000c10:	230f      	movs	r3, #15
 8000c12:	18fb      	adds	r3, r7, r3
 8000c14:	2200      	movs	r2, #0
 8000c16:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000c18:	230f      	movs	r3, #15
 8000c1a:	18fb      	adds	r3, r7, r3
 8000c1c:	781b      	ldrb	r3, [r3, #0]
  }
 8000c1e:	0018      	movs	r0, r3
 8000c20:	46bd      	mov	sp, r7
 8000c22:	b004      	add	sp, #16
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
 8000c2e:	0008      	movs	r0, r1
 8000c30:	0011      	movs	r1, r2
 8000c32:	1cbb      	adds	r3, r7, #2
 8000c34:	1c02      	adds	r2, r0, #0
 8000c36:	801a      	strh	r2, [r3, #0]
 8000c38:	1c7b      	adds	r3, r7, #1
 8000c3a:	1c0a      	adds	r2, r1, #0
 8000c3c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c3e:	1c7b      	adds	r3, r7, #1
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d004      	beq.n	8000c50 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c46:	1cbb      	adds	r3, r7, #2
 8000c48:	881a      	ldrh	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c4e:	e003      	b.n	8000c58 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c50:	1cbb      	adds	r3, r7, #2
 8000c52:	881a      	ldrh	r2, [r3, #0]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000c58:	46c0      	nop			@ (mov r8, r8)
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	b002      	add	sp, #8
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	0002      	movs	r2, r0
 8000c68:	1dbb      	adds	r3, r7, #6
 8000c6a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000c6c:	4b09      	ldr	r3, [pc, #36]	@ (8000c94 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000c6e:	695b      	ldr	r3, [r3, #20]
 8000c70:	1dba      	adds	r2, r7, #6
 8000c72:	8812      	ldrh	r2, [r2, #0]
 8000c74:	4013      	ands	r3, r2
 8000c76:	d008      	beq.n	8000c8a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c78:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000c7a:	1dba      	adds	r2, r7, #6
 8000c7c:	8812      	ldrh	r2, [r2, #0]
 8000c7e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000c80:	1dbb      	adds	r3, r7, #6
 8000c82:	881b      	ldrh	r3, [r3, #0]
 8000c84:	0018      	movs	r0, r3
 8000c86:	f7ff fc1d 	bl	80004c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8000c8a:	46c0      	nop			@ (mov r8, r8)
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	b002      	add	sp, #8
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	46c0      	nop			@ (mov r8, r8)
 8000c94:	40010400 	.word	0x40010400

08000c98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b088      	sub	sp, #32
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d101      	bne.n	8000caa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e301      	b.n	80012ae <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2201      	movs	r2, #1
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	d100      	bne.n	8000cb6 <HAL_RCC_OscConfig+0x1e>
 8000cb4:	e08d      	b.n	8000dd2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cb6:	4bc3      	ldr	r3, [pc, #780]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	220c      	movs	r2, #12
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	2b04      	cmp	r3, #4
 8000cc0:	d00e      	beq.n	8000ce0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cc2:	4bc0      	ldr	r3, [pc, #768]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	220c      	movs	r2, #12
 8000cc8:	4013      	ands	r3, r2
 8000cca:	2b08      	cmp	r3, #8
 8000ccc:	d116      	bne.n	8000cfc <HAL_RCC_OscConfig+0x64>
 8000cce:	4bbd      	ldr	r3, [pc, #756]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000cd0:	685a      	ldr	r2, [r3, #4]
 8000cd2:	2380      	movs	r3, #128	@ 0x80
 8000cd4:	025b      	lsls	r3, r3, #9
 8000cd6:	401a      	ands	r2, r3
 8000cd8:	2380      	movs	r3, #128	@ 0x80
 8000cda:	025b      	lsls	r3, r3, #9
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d10d      	bne.n	8000cfc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ce0:	4bb8      	ldr	r3, [pc, #736]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	2380      	movs	r3, #128	@ 0x80
 8000ce6:	029b      	lsls	r3, r3, #10
 8000ce8:	4013      	ands	r3, r2
 8000cea:	d100      	bne.n	8000cee <HAL_RCC_OscConfig+0x56>
 8000cec:	e070      	b.n	8000dd0 <HAL_RCC_OscConfig+0x138>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d000      	beq.n	8000cf8 <HAL_RCC_OscConfig+0x60>
 8000cf6:	e06b      	b.n	8000dd0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	e2d8      	b.n	80012ae <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d107      	bne.n	8000d14 <HAL_RCC_OscConfig+0x7c>
 8000d04:	4baf      	ldr	r3, [pc, #700]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	4bae      	ldr	r3, [pc, #696]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000d0a:	2180      	movs	r1, #128	@ 0x80
 8000d0c:	0249      	lsls	r1, r1, #9
 8000d0e:	430a      	orrs	r2, r1
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	e02f      	b.n	8000d74 <HAL_RCC_OscConfig+0xdc>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d10c      	bne.n	8000d36 <HAL_RCC_OscConfig+0x9e>
 8000d1c:	4ba9      	ldr	r3, [pc, #676]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	4ba8      	ldr	r3, [pc, #672]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000d22:	49a9      	ldr	r1, [pc, #676]	@ (8000fc8 <HAL_RCC_OscConfig+0x330>)
 8000d24:	400a      	ands	r2, r1
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	4ba6      	ldr	r3, [pc, #664]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	4ba5      	ldr	r3, [pc, #660]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000d2e:	49a7      	ldr	r1, [pc, #668]	@ (8000fcc <HAL_RCC_OscConfig+0x334>)
 8000d30:	400a      	ands	r2, r1
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	e01e      	b.n	8000d74 <HAL_RCC_OscConfig+0xdc>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	2b05      	cmp	r3, #5
 8000d3c:	d10e      	bne.n	8000d5c <HAL_RCC_OscConfig+0xc4>
 8000d3e:	4ba1      	ldr	r3, [pc, #644]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	4ba0      	ldr	r3, [pc, #640]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000d44:	2180      	movs	r1, #128	@ 0x80
 8000d46:	02c9      	lsls	r1, r1, #11
 8000d48:	430a      	orrs	r2, r1
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	4b9d      	ldr	r3, [pc, #628]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	4b9c      	ldr	r3, [pc, #624]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000d52:	2180      	movs	r1, #128	@ 0x80
 8000d54:	0249      	lsls	r1, r1, #9
 8000d56:	430a      	orrs	r2, r1
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	e00b      	b.n	8000d74 <HAL_RCC_OscConfig+0xdc>
 8000d5c:	4b99      	ldr	r3, [pc, #612]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	4b98      	ldr	r3, [pc, #608]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000d62:	4999      	ldr	r1, [pc, #612]	@ (8000fc8 <HAL_RCC_OscConfig+0x330>)
 8000d64:	400a      	ands	r2, r1
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	4b96      	ldr	r3, [pc, #600]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	4b95      	ldr	r3, [pc, #596]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000d6e:	4997      	ldr	r1, [pc, #604]	@ (8000fcc <HAL_RCC_OscConfig+0x334>)
 8000d70:	400a      	ands	r2, r1
 8000d72:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d014      	beq.n	8000da6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d7c:	f7ff fcde 	bl	800073c <HAL_GetTick>
 8000d80:	0003      	movs	r3, r0
 8000d82:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d84:	e008      	b.n	8000d98 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d86:	f7ff fcd9 	bl	800073c <HAL_GetTick>
 8000d8a:	0002      	movs	r2, r0
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	2b64      	cmp	r3, #100	@ 0x64
 8000d92:	d901      	bls.n	8000d98 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000d94:	2303      	movs	r3, #3
 8000d96:	e28a      	b.n	80012ae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d98:	4b8a      	ldr	r3, [pc, #552]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	2380      	movs	r3, #128	@ 0x80
 8000d9e:	029b      	lsls	r3, r3, #10
 8000da0:	4013      	ands	r3, r2
 8000da2:	d0f0      	beq.n	8000d86 <HAL_RCC_OscConfig+0xee>
 8000da4:	e015      	b.n	8000dd2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000da6:	f7ff fcc9 	bl	800073c <HAL_GetTick>
 8000daa:	0003      	movs	r3, r0
 8000dac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dae:	e008      	b.n	8000dc2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000db0:	f7ff fcc4 	bl	800073c <HAL_GetTick>
 8000db4:	0002      	movs	r2, r0
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	2b64      	cmp	r3, #100	@ 0x64
 8000dbc:	d901      	bls.n	8000dc2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	e275      	b.n	80012ae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dc2:	4b80      	ldr	r3, [pc, #512]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	2380      	movs	r3, #128	@ 0x80
 8000dc8:	029b      	lsls	r3, r3, #10
 8000dca:	4013      	ands	r3, r2
 8000dcc:	d1f0      	bne.n	8000db0 <HAL_RCC_OscConfig+0x118>
 8000dce:	e000      	b.n	8000dd2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dd0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2202      	movs	r2, #2
 8000dd8:	4013      	ands	r3, r2
 8000dda:	d100      	bne.n	8000dde <HAL_RCC_OscConfig+0x146>
 8000ddc:	e069      	b.n	8000eb2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000dde:	4b79      	ldr	r3, [pc, #484]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	220c      	movs	r2, #12
 8000de4:	4013      	ands	r3, r2
 8000de6:	d00b      	beq.n	8000e00 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000de8:	4b76      	ldr	r3, [pc, #472]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	220c      	movs	r2, #12
 8000dee:	4013      	ands	r3, r2
 8000df0:	2b08      	cmp	r3, #8
 8000df2:	d11c      	bne.n	8000e2e <HAL_RCC_OscConfig+0x196>
 8000df4:	4b73      	ldr	r3, [pc, #460]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000df6:	685a      	ldr	r2, [r3, #4]
 8000df8:	2380      	movs	r3, #128	@ 0x80
 8000dfa:	025b      	lsls	r3, r3, #9
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	d116      	bne.n	8000e2e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e00:	4b70      	ldr	r3, [pc, #448]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2202      	movs	r2, #2
 8000e06:	4013      	ands	r3, r2
 8000e08:	d005      	beq.n	8000e16 <HAL_RCC_OscConfig+0x17e>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	68db      	ldr	r3, [r3, #12]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d001      	beq.n	8000e16 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	e24b      	b.n	80012ae <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e16:	4b6b      	ldr	r3, [pc, #428]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	22f8      	movs	r2, #248	@ 0xf8
 8000e1c:	4393      	bics	r3, r2
 8000e1e:	0019      	movs	r1, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	691b      	ldr	r3, [r3, #16]
 8000e24:	00da      	lsls	r2, r3, #3
 8000e26:	4b67      	ldr	r3, [pc, #412]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000e28:	430a      	orrs	r2, r1
 8000e2a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e2c:	e041      	b.n	8000eb2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	68db      	ldr	r3, [r3, #12]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d024      	beq.n	8000e80 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e36:	4b63      	ldr	r3, [pc, #396]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	4b62      	ldr	r3, [pc, #392]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	430a      	orrs	r2, r1
 8000e40:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e42:	f7ff fc7b 	bl	800073c <HAL_GetTick>
 8000e46:	0003      	movs	r3, r0
 8000e48:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e4a:	e008      	b.n	8000e5e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e4c:	f7ff fc76 	bl	800073c <HAL_GetTick>
 8000e50:	0002      	movs	r2, r0
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d901      	bls.n	8000e5e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	e227      	b.n	80012ae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e5e:	4b59      	ldr	r3, [pc, #356]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2202      	movs	r2, #2
 8000e64:	4013      	ands	r3, r2
 8000e66:	d0f1      	beq.n	8000e4c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e68:	4b56      	ldr	r3, [pc, #344]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	22f8      	movs	r2, #248	@ 0xf8
 8000e6e:	4393      	bics	r3, r2
 8000e70:	0019      	movs	r1, r3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	691b      	ldr	r3, [r3, #16]
 8000e76:	00da      	lsls	r2, r3, #3
 8000e78:	4b52      	ldr	r3, [pc, #328]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000e7a:	430a      	orrs	r2, r1
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	e018      	b.n	8000eb2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e80:	4b50      	ldr	r3, [pc, #320]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	4b4f      	ldr	r3, [pc, #316]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000e86:	2101      	movs	r1, #1
 8000e88:	438a      	bics	r2, r1
 8000e8a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e8c:	f7ff fc56 	bl	800073c <HAL_GetTick>
 8000e90:	0003      	movs	r3, r0
 8000e92:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e94:	e008      	b.n	8000ea8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e96:	f7ff fc51 	bl	800073c <HAL_GetTick>
 8000e9a:	0002      	movs	r2, r0
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d901      	bls.n	8000ea8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	e202      	b.n	80012ae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ea8:	4b46      	ldr	r3, [pc, #280]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2202      	movs	r2, #2
 8000eae:	4013      	ands	r3, r2
 8000eb0:	d1f1      	bne.n	8000e96 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2208      	movs	r2, #8
 8000eb8:	4013      	ands	r3, r2
 8000eba:	d036      	beq.n	8000f2a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	69db      	ldr	r3, [r3, #28]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d019      	beq.n	8000ef8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ec4:	4b3f      	ldr	r3, [pc, #252]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000ec6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000ec8:	4b3e      	ldr	r3, [pc, #248]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000eca:	2101      	movs	r1, #1
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ed0:	f7ff fc34 	bl	800073c <HAL_GetTick>
 8000ed4:	0003      	movs	r3, r0
 8000ed6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ed8:	e008      	b.n	8000eec <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000eda:	f7ff fc2f 	bl	800073c <HAL_GetTick>
 8000ede:	0002      	movs	r2, r0
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d901      	bls.n	8000eec <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	e1e0      	b.n	80012ae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eec:	4b35      	ldr	r3, [pc, #212]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	d0f1      	beq.n	8000eda <HAL_RCC_OscConfig+0x242>
 8000ef6:	e018      	b.n	8000f2a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ef8:	4b32      	ldr	r3, [pc, #200]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000efa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000efc:	4b31      	ldr	r3, [pc, #196]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000efe:	2101      	movs	r1, #1
 8000f00:	438a      	bics	r2, r1
 8000f02:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f04:	f7ff fc1a 	bl	800073c <HAL_GetTick>
 8000f08:	0003      	movs	r3, r0
 8000f0a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f0c:	e008      	b.n	8000f20 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f0e:	f7ff fc15 	bl	800073c <HAL_GetTick>
 8000f12:	0002      	movs	r2, r0
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d901      	bls.n	8000f20 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	e1c6      	b.n	80012ae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f20:	4b28      	ldr	r3, [pc, #160]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f24:	2202      	movs	r2, #2
 8000f26:	4013      	ands	r3, r2
 8000f28:	d1f1      	bne.n	8000f0e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2204      	movs	r2, #4
 8000f30:	4013      	ands	r3, r2
 8000f32:	d100      	bne.n	8000f36 <HAL_RCC_OscConfig+0x29e>
 8000f34:	e0b4      	b.n	80010a0 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f36:	201f      	movs	r0, #31
 8000f38:	183b      	adds	r3, r7, r0
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f3e:	4b21      	ldr	r3, [pc, #132]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000f40:	69da      	ldr	r2, [r3, #28]
 8000f42:	2380      	movs	r3, #128	@ 0x80
 8000f44:	055b      	lsls	r3, r3, #21
 8000f46:	4013      	ands	r3, r2
 8000f48:	d110      	bne.n	8000f6c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f4a:	4b1e      	ldr	r3, [pc, #120]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000f4c:	69da      	ldr	r2, [r3, #28]
 8000f4e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000f50:	2180      	movs	r1, #128	@ 0x80
 8000f52:	0549      	lsls	r1, r1, #21
 8000f54:	430a      	orrs	r2, r1
 8000f56:	61da      	str	r2, [r3, #28]
 8000f58:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000f5a:	69da      	ldr	r2, [r3, #28]
 8000f5c:	2380      	movs	r3, #128	@ 0x80
 8000f5e:	055b      	lsls	r3, r3, #21
 8000f60:	4013      	ands	r3, r2
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000f66:	183b      	adds	r3, r7, r0
 8000f68:	2201      	movs	r2, #1
 8000f6a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f6c:	4b18      	ldr	r3, [pc, #96]	@ (8000fd0 <HAL_RCC_OscConfig+0x338>)
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	2380      	movs	r3, #128	@ 0x80
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	4013      	ands	r3, r2
 8000f76:	d11a      	bne.n	8000fae <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f78:	4b15      	ldr	r3, [pc, #84]	@ (8000fd0 <HAL_RCC_OscConfig+0x338>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4b14      	ldr	r3, [pc, #80]	@ (8000fd0 <HAL_RCC_OscConfig+0x338>)
 8000f7e:	2180      	movs	r1, #128	@ 0x80
 8000f80:	0049      	lsls	r1, r1, #1
 8000f82:	430a      	orrs	r2, r1
 8000f84:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f86:	f7ff fbd9 	bl	800073c <HAL_GetTick>
 8000f8a:	0003      	movs	r3, r0
 8000f8c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f8e:	e008      	b.n	8000fa2 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f90:	f7ff fbd4 	bl	800073c <HAL_GetTick>
 8000f94:	0002      	movs	r2, r0
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	2b64      	cmp	r3, #100	@ 0x64
 8000f9c:	d901      	bls.n	8000fa2 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	e185      	b.n	80012ae <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd0 <HAL_RCC_OscConfig+0x338>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	2380      	movs	r3, #128	@ 0x80
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	4013      	ands	r3, r2
 8000fac:	d0f0      	beq.n	8000f90 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d10e      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x33c>
 8000fb6:	4b03      	ldr	r3, [pc, #12]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000fb8:	6a1a      	ldr	r2, [r3, #32]
 8000fba:	4b02      	ldr	r3, [pc, #8]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	621a      	str	r2, [r3, #32]
 8000fc2:	e035      	b.n	8001030 <HAL_RCC_OscConfig+0x398>
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	fffeffff 	.word	0xfffeffff
 8000fcc:	fffbffff 	.word	0xfffbffff
 8000fd0:	40007000 	.word	0x40007000
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d10c      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x35e>
 8000fdc:	4bb6      	ldr	r3, [pc, #728]	@ (80012b8 <HAL_RCC_OscConfig+0x620>)
 8000fde:	6a1a      	ldr	r2, [r3, #32]
 8000fe0:	4bb5      	ldr	r3, [pc, #724]	@ (80012b8 <HAL_RCC_OscConfig+0x620>)
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	438a      	bics	r2, r1
 8000fe6:	621a      	str	r2, [r3, #32]
 8000fe8:	4bb3      	ldr	r3, [pc, #716]	@ (80012b8 <HAL_RCC_OscConfig+0x620>)
 8000fea:	6a1a      	ldr	r2, [r3, #32]
 8000fec:	4bb2      	ldr	r3, [pc, #712]	@ (80012b8 <HAL_RCC_OscConfig+0x620>)
 8000fee:	2104      	movs	r1, #4
 8000ff0:	438a      	bics	r2, r1
 8000ff2:	621a      	str	r2, [r3, #32]
 8000ff4:	e01c      	b.n	8001030 <HAL_RCC_OscConfig+0x398>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	2b05      	cmp	r3, #5
 8000ffc:	d10c      	bne.n	8001018 <HAL_RCC_OscConfig+0x380>
 8000ffe:	4bae      	ldr	r3, [pc, #696]	@ (80012b8 <HAL_RCC_OscConfig+0x620>)
 8001000:	6a1a      	ldr	r2, [r3, #32]
 8001002:	4bad      	ldr	r3, [pc, #692]	@ (80012b8 <HAL_RCC_OscConfig+0x620>)
 8001004:	2104      	movs	r1, #4
 8001006:	430a      	orrs	r2, r1
 8001008:	621a      	str	r2, [r3, #32]
 800100a:	4bab      	ldr	r3, [pc, #684]	@ (80012b8 <HAL_RCC_OscConfig+0x620>)
 800100c:	6a1a      	ldr	r2, [r3, #32]
 800100e:	4baa      	ldr	r3, [pc, #680]	@ (80012b8 <HAL_RCC_OscConfig+0x620>)
 8001010:	2101      	movs	r1, #1
 8001012:	430a      	orrs	r2, r1
 8001014:	621a      	str	r2, [r3, #32]
 8001016:	e00b      	b.n	8001030 <HAL_RCC_OscConfig+0x398>
 8001018:	4ba7      	ldr	r3, [pc, #668]	@ (80012b8 <HAL_RCC_OscConfig+0x620>)
 800101a:	6a1a      	ldr	r2, [r3, #32]
 800101c:	4ba6      	ldr	r3, [pc, #664]	@ (80012b8 <HAL_RCC_OscConfig+0x620>)
 800101e:	2101      	movs	r1, #1
 8001020:	438a      	bics	r2, r1
 8001022:	621a      	str	r2, [r3, #32]
 8001024:	4ba4      	ldr	r3, [pc, #656]	@ (80012b8 <HAL_RCC_OscConfig+0x620>)
 8001026:	6a1a      	ldr	r2, [r3, #32]
 8001028:	4ba3      	ldr	r3, [pc, #652]	@ (80012b8 <HAL_RCC_OscConfig+0x620>)
 800102a:	2104      	movs	r1, #4
 800102c:	438a      	bics	r2, r1
 800102e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d014      	beq.n	8001062 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001038:	f7ff fb80 	bl	800073c <HAL_GetTick>
 800103c:	0003      	movs	r3, r0
 800103e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001040:	e009      	b.n	8001056 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001042:	f7ff fb7b 	bl	800073c <HAL_GetTick>
 8001046:	0002      	movs	r2, r0
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	4a9b      	ldr	r2, [pc, #620]	@ (80012bc <HAL_RCC_OscConfig+0x624>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d901      	bls.n	8001056 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001052:	2303      	movs	r3, #3
 8001054:	e12b      	b.n	80012ae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001056:	4b98      	ldr	r3, [pc, #608]	@ (80012b8 <HAL_RCC_OscConfig+0x620>)
 8001058:	6a1b      	ldr	r3, [r3, #32]
 800105a:	2202      	movs	r2, #2
 800105c:	4013      	ands	r3, r2
 800105e:	d0f0      	beq.n	8001042 <HAL_RCC_OscConfig+0x3aa>
 8001060:	e013      	b.n	800108a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001062:	f7ff fb6b 	bl	800073c <HAL_GetTick>
 8001066:	0003      	movs	r3, r0
 8001068:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800106a:	e009      	b.n	8001080 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800106c:	f7ff fb66 	bl	800073c <HAL_GetTick>
 8001070:	0002      	movs	r2, r0
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	4a91      	ldr	r2, [pc, #580]	@ (80012bc <HAL_RCC_OscConfig+0x624>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d901      	bls.n	8001080 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800107c:	2303      	movs	r3, #3
 800107e:	e116      	b.n	80012ae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001080:	4b8d      	ldr	r3, [pc, #564]	@ (80012b8 <HAL_RCC_OscConfig+0x620>)
 8001082:	6a1b      	ldr	r3, [r3, #32]
 8001084:	2202      	movs	r2, #2
 8001086:	4013      	ands	r3, r2
 8001088:	d1f0      	bne.n	800106c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800108a:	231f      	movs	r3, #31
 800108c:	18fb      	adds	r3, r7, r3
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d105      	bne.n	80010a0 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001094:	4b88      	ldr	r3, [pc, #544]	@ (80012b8 <HAL_RCC_OscConfig+0x620>)
 8001096:	69da      	ldr	r2, [r3, #28]
 8001098:	4b87      	ldr	r3, [pc, #540]	@ (80012b8 <HAL_RCC_OscConfig+0x620>)
 800109a:	4989      	ldr	r1, [pc, #548]	@ (80012c0 <HAL_RCC_OscConfig+0x628>)
 800109c:	400a      	ands	r2, r1
 800109e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2210      	movs	r2, #16
 80010a6:	4013      	ands	r3, r2
 80010a8:	d063      	beq.n	8001172 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d12a      	bne.n	8001108 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80010b2:	4b81      	ldr	r3, [pc, #516]	@ (80012b8 <HAL_RCC_OscConfig+0x620>)
 80010b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80010b6:	4b80      	ldr	r3, [pc, #512]	@ (80012b8 <HAL_RCC_OscConfig+0x620>)
 80010b8:	2104      	movs	r1, #4
 80010ba:	430a      	orrs	r2, r1
 80010bc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80010be:	4b7e      	ldr	r3, [pc, #504]	@ (80012b8 <HAL_RCC_OscConfig+0x620>)
 80010c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80010c2:	4b7d      	ldr	r3, [pc, #500]	@ (80012b8 <HAL_RCC_OscConfig+0x620>)
 80010c4:	2101      	movs	r1, #1
 80010c6:	430a      	orrs	r2, r1
 80010c8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ca:	f7ff fb37 	bl	800073c <HAL_GetTick>
 80010ce:	0003      	movs	r3, r0
 80010d0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80010d2:	e008      	b.n	80010e6 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80010d4:	f7ff fb32 	bl	800073c <HAL_GetTick>
 80010d8:	0002      	movs	r2, r0
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d901      	bls.n	80010e6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80010e2:	2303      	movs	r3, #3
 80010e4:	e0e3      	b.n	80012ae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80010e6:	4b74      	ldr	r3, [pc, #464]	@ (80012b8 <HAL_RCC_OscConfig+0x620>)
 80010e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010ea:	2202      	movs	r2, #2
 80010ec:	4013      	ands	r3, r2
 80010ee:	d0f1      	beq.n	80010d4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80010f0:	4b71      	ldr	r3, [pc, #452]	@ (80012b8 <HAL_RCC_OscConfig+0x620>)
 80010f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010f4:	22f8      	movs	r2, #248	@ 0xf8
 80010f6:	4393      	bics	r3, r2
 80010f8:	0019      	movs	r1, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	00da      	lsls	r2, r3, #3
 8001100:	4b6d      	ldr	r3, [pc, #436]	@ (80012b8 <HAL_RCC_OscConfig+0x620>)
 8001102:	430a      	orrs	r2, r1
 8001104:	635a      	str	r2, [r3, #52]	@ 0x34
 8001106:	e034      	b.n	8001172 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	695b      	ldr	r3, [r3, #20]
 800110c:	3305      	adds	r3, #5
 800110e:	d111      	bne.n	8001134 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001110:	4b69      	ldr	r3, [pc, #420]	@ (80012b8 <HAL_RCC_OscConfig+0x620>)
 8001112:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001114:	4b68      	ldr	r3, [pc, #416]	@ (80012b8 <HAL_RCC_OscConfig+0x620>)
 8001116:	2104      	movs	r1, #4
 8001118:	438a      	bics	r2, r1
 800111a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800111c:	4b66      	ldr	r3, [pc, #408]	@ (80012b8 <HAL_RCC_OscConfig+0x620>)
 800111e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001120:	22f8      	movs	r2, #248	@ 0xf8
 8001122:	4393      	bics	r3, r2
 8001124:	0019      	movs	r1, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	00da      	lsls	r2, r3, #3
 800112c:	4b62      	ldr	r3, [pc, #392]	@ (80012b8 <HAL_RCC_OscConfig+0x620>)
 800112e:	430a      	orrs	r2, r1
 8001130:	635a      	str	r2, [r3, #52]	@ 0x34
 8001132:	e01e      	b.n	8001172 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001134:	4b60      	ldr	r3, [pc, #384]	@ (80012b8 <HAL_RCC_OscConfig+0x620>)
 8001136:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001138:	4b5f      	ldr	r3, [pc, #380]	@ (80012b8 <HAL_RCC_OscConfig+0x620>)
 800113a:	2104      	movs	r1, #4
 800113c:	430a      	orrs	r2, r1
 800113e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001140:	4b5d      	ldr	r3, [pc, #372]	@ (80012b8 <HAL_RCC_OscConfig+0x620>)
 8001142:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001144:	4b5c      	ldr	r3, [pc, #368]	@ (80012b8 <HAL_RCC_OscConfig+0x620>)
 8001146:	2101      	movs	r1, #1
 8001148:	438a      	bics	r2, r1
 800114a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800114c:	f7ff faf6 	bl	800073c <HAL_GetTick>
 8001150:	0003      	movs	r3, r0
 8001152:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001154:	e008      	b.n	8001168 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001156:	f7ff faf1 	bl	800073c <HAL_GetTick>
 800115a:	0002      	movs	r2, r0
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	2b02      	cmp	r3, #2
 8001162:	d901      	bls.n	8001168 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001164:	2303      	movs	r3, #3
 8001166:	e0a2      	b.n	80012ae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001168:	4b53      	ldr	r3, [pc, #332]	@ (80012b8 <HAL_RCC_OscConfig+0x620>)
 800116a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800116c:	2202      	movs	r2, #2
 800116e:	4013      	ands	r3, r2
 8001170:	d1f1      	bne.n	8001156 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6a1b      	ldr	r3, [r3, #32]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d100      	bne.n	800117c <HAL_RCC_OscConfig+0x4e4>
 800117a:	e097      	b.n	80012ac <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800117c:	4b4e      	ldr	r3, [pc, #312]	@ (80012b8 <HAL_RCC_OscConfig+0x620>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	220c      	movs	r2, #12
 8001182:	4013      	ands	r3, r2
 8001184:	2b08      	cmp	r3, #8
 8001186:	d100      	bne.n	800118a <HAL_RCC_OscConfig+0x4f2>
 8001188:	e06b      	b.n	8001262 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6a1b      	ldr	r3, [r3, #32]
 800118e:	2b02      	cmp	r3, #2
 8001190:	d14c      	bne.n	800122c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001192:	4b49      	ldr	r3, [pc, #292]	@ (80012b8 <HAL_RCC_OscConfig+0x620>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	4b48      	ldr	r3, [pc, #288]	@ (80012b8 <HAL_RCC_OscConfig+0x620>)
 8001198:	494a      	ldr	r1, [pc, #296]	@ (80012c4 <HAL_RCC_OscConfig+0x62c>)
 800119a:	400a      	ands	r2, r1
 800119c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800119e:	f7ff facd 	bl	800073c <HAL_GetTick>
 80011a2:	0003      	movs	r3, r0
 80011a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011a6:	e008      	b.n	80011ba <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011a8:	f7ff fac8 	bl	800073c <HAL_GetTick>
 80011ac:	0002      	movs	r2, r0
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d901      	bls.n	80011ba <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e079      	b.n	80012ae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011ba:	4b3f      	ldr	r3, [pc, #252]	@ (80012b8 <HAL_RCC_OscConfig+0x620>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	2380      	movs	r3, #128	@ 0x80
 80011c0:	049b      	lsls	r3, r3, #18
 80011c2:	4013      	ands	r3, r2
 80011c4:	d1f0      	bne.n	80011a8 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011c6:	4b3c      	ldr	r3, [pc, #240]	@ (80012b8 <HAL_RCC_OscConfig+0x620>)
 80011c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011ca:	220f      	movs	r2, #15
 80011cc:	4393      	bics	r3, r2
 80011ce:	0019      	movs	r1, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011d4:	4b38      	ldr	r3, [pc, #224]	@ (80012b8 <HAL_RCC_OscConfig+0x620>)
 80011d6:	430a      	orrs	r2, r1
 80011d8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80011da:	4b37      	ldr	r3, [pc, #220]	@ (80012b8 <HAL_RCC_OscConfig+0x620>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	4a3a      	ldr	r2, [pc, #232]	@ (80012c8 <HAL_RCC_OscConfig+0x630>)
 80011e0:	4013      	ands	r3, r2
 80011e2:	0019      	movs	r1, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ec:	431a      	orrs	r2, r3
 80011ee:	4b32      	ldr	r3, [pc, #200]	@ (80012b8 <HAL_RCC_OscConfig+0x620>)
 80011f0:	430a      	orrs	r2, r1
 80011f2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011f4:	4b30      	ldr	r3, [pc, #192]	@ (80012b8 <HAL_RCC_OscConfig+0x620>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	4b2f      	ldr	r3, [pc, #188]	@ (80012b8 <HAL_RCC_OscConfig+0x620>)
 80011fa:	2180      	movs	r1, #128	@ 0x80
 80011fc:	0449      	lsls	r1, r1, #17
 80011fe:	430a      	orrs	r2, r1
 8001200:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001202:	f7ff fa9b 	bl	800073c <HAL_GetTick>
 8001206:	0003      	movs	r3, r0
 8001208:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800120a:	e008      	b.n	800121e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800120c:	f7ff fa96 	bl	800073c <HAL_GetTick>
 8001210:	0002      	movs	r2, r0
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b02      	cmp	r3, #2
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e047      	b.n	80012ae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800121e:	4b26      	ldr	r3, [pc, #152]	@ (80012b8 <HAL_RCC_OscConfig+0x620>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	2380      	movs	r3, #128	@ 0x80
 8001224:	049b      	lsls	r3, r3, #18
 8001226:	4013      	ands	r3, r2
 8001228:	d0f0      	beq.n	800120c <HAL_RCC_OscConfig+0x574>
 800122a:	e03f      	b.n	80012ac <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800122c:	4b22      	ldr	r3, [pc, #136]	@ (80012b8 <HAL_RCC_OscConfig+0x620>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	4b21      	ldr	r3, [pc, #132]	@ (80012b8 <HAL_RCC_OscConfig+0x620>)
 8001232:	4924      	ldr	r1, [pc, #144]	@ (80012c4 <HAL_RCC_OscConfig+0x62c>)
 8001234:	400a      	ands	r2, r1
 8001236:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001238:	f7ff fa80 	bl	800073c <HAL_GetTick>
 800123c:	0003      	movs	r3, r0
 800123e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001240:	e008      	b.n	8001254 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001242:	f7ff fa7b 	bl	800073c <HAL_GetTick>
 8001246:	0002      	movs	r2, r0
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	2b02      	cmp	r3, #2
 800124e:	d901      	bls.n	8001254 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e02c      	b.n	80012ae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001254:	4b18      	ldr	r3, [pc, #96]	@ (80012b8 <HAL_RCC_OscConfig+0x620>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	2380      	movs	r3, #128	@ 0x80
 800125a:	049b      	lsls	r3, r3, #18
 800125c:	4013      	ands	r3, r2
 800125e:	d1f0      	bne.n	8001242 <HAL_RCC_OscConfig+0x5aa>
 8001260:	e024      	b.n	80012ac <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a1b      	ldr	r3, [r3, #32]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d101      	bne.n	800126e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e01f      	b.n	80012ae <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800126e:	4b12      	ldr	r3, [pc, #72]	@ (80012b8 <HAL_RCC_OscConfig+0x620>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001274:	4b10      	ldr	r3, [pc, #64]	@ (80012b8 <HAL_RCC_OscConfig+0x620>)
 8001276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001278:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800127a:	697a      	ldr	r2, [r7, #20]
 800127c:	2380      	movs	r3, #128	@ 0x80
 800127e:	025b      	lsls	r3, r3, #9
 8001280:	401a      	ands	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001286:	429a      	cmp	r2, r3
 8001288:	d10e      	bne.n	80012a8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	220f      	movs	r2, #15
 800128e:	401a      	ands	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001294:	429a      	cmp	r2, r3
 8001296:	d107      	bne.n	80012a8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001298:	697a      	ldr	r2, [r7, #20]
 800129a:	23f0      	movs	r3, #240	@ 0xf0
 800129c:	039b      	lsls	r3, r3, #14
 800129e:	401a      	ands	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d001      	beq.n	80012ac <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e000      	b.n	80012ae <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	0018      	movs	r0, r3
 80012b0:	46bd      	mov	sp, r7
 80012b2:	b008      	add	sp, #32
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	46c0      	nop			@ (mov r8, r8)
 80012b8:	40021000 	.word	0x40021000
 80012bc:	00001388 	.word	0x00001388
 80012c0:	efffffff 	.word	0xefffffff
 80012c4:	feffffff 	.word	0xfeffffff
 80012c8:	ffc2ffff 	.word	0xffc2ffff

080012cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d101      	bne.n	80012e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e0b3      	b.n	8001448 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80012e0:	4b5b      	ldr	r3, [pc, #364]	@ (8001450 <HAL_RCC_ClockConfig+0x184>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2201      	movs	r2, #1
 80012e6:	4013      	ands	r3, r2
 80012e8:	683a      	ldr	r2, [r7, #0]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d911      	bls.n	8001312 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ee:	4b58      	ldr	r3, [pc, #352]	@ (8001450 <HAL_RCC_ClockConfig+0x184>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2201      	movs	r2, #1
 80012f4:	4393      	bics	r3, r2
 80012f6:	0019      	movs	r1, r3
 80012f8:	4b55      	ldr	r3, [pc, #340]	@ (8001450 <HAL_RCC_ClockConfig+0x184>)
 80012fa:	683a      	ldr	r2, [r7, #0]
 80012fc:	430a      	orrs	r2, r1
 80012fe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001300:	4b53      	ldr	r3, [pc, #332]	@ (8001450 <HAL_RCC_ClockConfig+0x184>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2201      	movs	r2, #1
 8001306:	4013      	ands	r3, r2
 8001308:	683a      	ldr	r2, [r7, #0]
 800130a:	429a      	cmp	r2, r3
 800130c:	d001      	beq.n	8001312 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e09a      	b.n	8001448 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2202      	movs	r2, #2
 8001318:	4013      	ands	r3, r2
 800131a:	d015      	beq.n	8001348 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2204      	movs	r2, #4
 8001322:	4013      	ands	r3, r2
 8001324:	d006      	beq.n	8001334 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001326:	4b4b      	ldr	r3, [pc, #300]	@ (8001454 <HAL_RCC_ClockConfig+0x188>)
 8001328:	685a      	ldr	r2, [r3, #4]
 800132a:	4b4a      	ldr	r3, [pc, #296]	@ (8001454 <HAL_RCC_ClockConfig+0x188>)
 800132c:	21e0      	movs	r1, #224	@ 0xe0
 800132e:	00c9      	lsls	r1, r1, #3
 8001330:	430a      	orrs	r2, r1
 8001332:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001334:	4b47      	ldr	r3, [pc, #284]	@ (8001454 <HAL_RCC_ClockConfig+0x188>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	22f0      	movs	r2, #240	@ 0xf0
 800133a:	4393      	bics	r3, r2
 800133c:	0019      	movs	r1, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689a      	ldr	r2, [r3, #8]
 8001342:	4b44      	ldr	r3, [pc, #272]	@ (8001454 <HAL_RCC_ClockConfig+0x188>)
 8001344:	430a      	orrs	r2, r1
 8001346:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2201      	movs	r2, #1
 800134e:	4013      	ands	r3, r2
 8001350:	d040      	beq.n	80013d4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d107      	bne.n	800136a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800135a:	4b3e      	ldr	r3, [pc, #248]	@ (8001454 <HAL_RCC_ClockConfig+0x188>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	2380      	movs	r3, #128	@ 0x80
 8001360:	029b      	lsls	r3, r3, #10
 8001362:	4013      	ands	r3, r2
 8001364:	d114      	bne.n	8001390 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e06e      	b.n	8001448 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	2b02      	cmp	r3, #2
 8001370:	d107      	bne.n	8001382 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001372:	4b38      	ldr	r3, [pc, #224]	@ (8001454 <HAL_RCC_ClockConfig+0x188>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	2380      	movs	r3, #128	@ 0x80
 8001378:	049b      	lsls	r3, r3, #18
 800137a:	4013      	ands	r3, r2
 800137c:	d108      	bne.n	8001390 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e062      	b.n	8001448 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001382:	4b34      	ldr	r3, [pc, #208]	@ (8001454 <HAL_RCC_ClockConfig+0x188>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2202      	movs	r2, #2
 8001388:	4013      	ands	r3, r2
 800138a:	d101      	bne.n	8001390 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e05b      	b.n	8001448 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001390:	4b30      	ldr	r3, [pc, #192]	@ (8001454 <HAL_RCC_ClockConfig+0x188>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	2203      	movs	r2, #3
 8001396:	4393      	bics	r3, r2
 8001398:	0019      	movs	r1, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685a      	ldr	r2, [r3, #4]
 800139e:	4b2d      	ldr	r3, [pc, #180]	@ (8001454 <HAL_RCC_ClockConfig+0x188>)
 80013a0:	430a      	orrs	r2, r1
 80013a2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013a4:	f7ff f9ca 	bl	800073c <HAL_GetTick>
 80013a8:	0003      	movs	r3, r0
 80013aa:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ac:	e009      	b.n	80013c2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013ae:	f7ff f9c5 	bl	800073c <HAL_GetTick>
 80013b2:	0002      	movs	r2, r0
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	4a27      	ldr	r2, [pc, #156]	@ (8001458 <HAL_RCC_ClockConfig+0x18c>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e042      	b.n	8001448 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013c2:	4b24      	ldr	r3, [pc, #144]	@ (8001454 <HAL_RCC_ClockConfig+0x188>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	220c      	movs	r2, #12
 80013c8:	401a      	ands	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d1ec      	bne.n	80013ae <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001450 <HAL_RCC_ClockConfig+0x184>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2201      	movs	r2, #1
 80013da:	4013      	ands	r3, r2
 80013dc:	683a      	ldr	r2, [r7, #0]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d211      	bcs.n	8001406 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001450 <HAL_RCC_ClockConfig+0x184>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2201      	movs	r2, #1
 80013e8:	4393      	bics	r3, r2
 80013ea:	0019      	movs	r1, r3
 80013ec:	4b18      	ldr	r3, [pc, #96]	@ (8001450 <HAL_RCC_ClockConfig+0x184>)
 80013ee:	683a      	ldr	r2, [r7, #0]
 80013f0:	430a      	orrs	r2, r1
 80013f2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013f4:	4b16      	ldr	r3, [pc, #88]	@ (8001450 <HAL_RCC_ClockConfig+0x184>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2201      	movs	r2, #1
 80013fa:	4013      	ands	r3, r2
 80013fc:	683a      	ldr	r2, [r7, #0]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d001      	beq.n	8001406 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e020      	b.n	8001448 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2204      	movs	r2, #4
 800140c:	4013      	ands	r3, r2
 800140e:	d009      	beq.n	8001424 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001410:	4b10      	ldr	r3, [pc, #64]	@ (8001454 <HAL_RCC_ClockConfig+0x188>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	4a11      	ldr	r2, [pc, #68]	@ (800145c <HAL_RCC_ClockConfig+0x190>)
 8001416:	4013      	ands	r3, r2
 8001418:	0019      	movs	r1, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	68da      	ldr	r2, [r3, #12]
 800141e:	4b0d      	ldr	r3, [pc, #52]	@ (8001454 <HAL_RCC_ClockConfig+0x188>)
 8001420:	430a      	orrs	r2, r1
 8001422:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001424:	f000 f820 	bl	8001468 <HAL_RCC_GetSysClockFreq>
 8001428:	0001      	movs	r1, r0
 800142a:	4b0a      	ldr	r3, [pc, #40]	@ (8001454 <HAL_RCC_ClockConfig+0x188>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	091b      	lsrs	r3, r3, #4
 8001430:	220f      	movs	r2, #15
 8001432:	4013      	ands	r3, r2
 8001434:	4a0a      	ldr	r2, [pc, #40]	@ (8001460 <HAL_RCC_ClockConfig+0x194>)
 8001436:	5cd3      	ldrb	r3, [r2, r3]
 8001438:	000a      	movs	r2, r1
 800143a:	40da      	lsrs	r2, r3
 800143c:	4b09      	ldr	r3, [pc, #36]	@ (8001464 <HAL_RCC_ClockConfig+0x198>)
 800143e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001440:	2003      	movs	r0, #3
 8001442:	f7ff f935 	bl	80006b0 <HAL_InitTick>
  
  return HAL_OK;
 8001446:	2300      	movs	r3, #0
}
 8001448:	0018      	movs	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	b004      	add	sp, #16
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40022000 	.word	0x40022000
 8001454:	40021000 	.word	0x40021000
 8001458:	00001388 	.word	0x00001388
 800145c:	fffff8ff 	.word	0xfffff8ff
 8001460:	08001584 	.word	0x08001584
 8001464:	20000008 	.word	0x20000008

08001468 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	2300      	movs	r3, #0
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]
 800147a:	2300      	movs	r3, #0
 800147c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800147e:	2300      	movs	r3, #0
 8001480:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001482:	4b20      	ldr	r3, [pc, #128]	@ (8001504 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	220c      	movs	r2, #12
 800148c:	4013      	ands	r3, r2
 800148e:	2b04      	cmp	r3, #4
 8001490:	d002      	beq.n	8001498 <HAL_RCC_GetSysClockFreq+0x30>
 8001492:	2b08      	cmp	r3, #8
 8001494:	d003      	beq.n	800149e <HAL_RCC_GetSysClockFreq+0x36>
 8001496:	e02c      	b.n	80014f2 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001498:	4b1b      	ldr	r3, [pc, #108]	@ (8001508 <HAL_RCC_GetSysClockFreq+0xa0>)
 800149a:	613b      	str	r3, [r7, #16]
      break;
 800149c:	e02c      	b.n	80014f8 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	0c9b      	lsrs	r3, r3, #18
 80014a2:	220f      	movs	r2, #15
 80014a4:	4013      	ands	r3, r2
 80014a6:	4a19      	ldr	r2, [pc, #100]	@ (800150c <HAL_RCC_GetSysClockFreq+0xa4>)
 80014a8:	5cd3      	ldrb	r3, [r2, r3]
 80014aa:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80014ac:	4b15      	ldr	r3, [pc, #84]	@ (8001504 <HAL_RCC_GetSysClockFreq+0x9c>)
 80014ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014b0:	220f      	movs	r2, #15
 80014b2:	4013      	ands	r3, r2
 80014b4:	4a16      	ldr	r2, [pc, #88]	@ (8001510 <HAL_RCC_GetSysClockFreq+0xa8>)
 80014b6:	5cd3      	ldrb	r3, [r2, r3]
 80014b8:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	2380      	movs	r3, #128	@ 0x80
 80014be:	025b      	lsls	r3, r3, #9
 80014c0:	4013      	ands	r3, r2
 80014c2:	d009      	beq.n	80014d8 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80014c4:	68b9      	ldr	r1, [r7, #8]
 80014c6:	4810      	ldr	r0, [pc, #64]	@ (8001508 <HAL_RCC_GetSysClockFreq+0xa0>)
 80014c8:	f7fe fe1e 	bl	8000108 <__udivsi3>
 80014cc:	0003      	movs	r3, r0
 80014ce:	001a      	movs	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4353      	muls	r3, r2
 80014d4:	617b      	str	r3, [r7, #20]
 80014d6:	e009      	b.n	80014ec <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80014d8:	6879      	ldr	r1, [r7, #4]
 80014da:	000a      	movs	r2, r1
 80014dc:	0152      	lsls	r2, r2, #5
 80014de:	1a52      	subs	r2, r2, r1
 80014e0:	0193      	lsls	r3, r2, #6
 80014e2:	1a9b      	subs	r3, r3, r2
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	185b      	adds	r3, r3, r1
 80014e8:	021b      	lsls	r3, r3, #8
 80014ea:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	613b      	str	r3, [r7, #16]
      break;
 80014f0:	e002      	b.n	80014f8 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014f2:	4b05      	ldr	r3, [pc, #20]	@ (8001508 <HAL_RCC_GetSysClockFreq+0xa0>)
 80014f4:	613b      	str	r3, [r7, #16]
      break;
 80014f6:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80014f8:	693b      	ldr	r3, [r7, #16]
}
 80014fa:	0018      	movs	r0, r3
 80014fc:	46bd      	mov	sp, r7
 80014fe:	b006      	add	sp, #24
 8001500:	bd80      	pop	{r7, pc}
 8001502:	46c0      	nop			@ (mov r8, r8)
 8001504:	40021000 	.word	0x40021000
 8001508:	007a1200 	.word	0x007a1200
 800150c:	08001594 	.word	0x08001594
 8001510:	080015a4 	.word	0x080015a4

08001514 <memset>:
 8001514:	0003      	movs	r3, r0
 8001516:	1882      	adds	r2, r0, r2
 8001518:	4293      	cmp	r3, r2
 800151a:	d100      	bne.n	800151e <memset+0xa>
 800151c:	4770      	bx	lr
 800151e:	7019      	strb	r1, [r3, #0]
 8001520:	3301      	adds	r3, #1
 8001522:	e7f9      	b.n	8001518 <memset+0x4>

08001524 <__libc_init_array>:
 8001524:	b570      	push	{r4, r5, r6, lr}
 8001526:	2600      	movs	r6, #0
 8001528:	4c0c      	ldr	r4, [pc, #48]	@ (800155c <__libc_init_array+0x38>)
 800152a:	4d0d      	ldr	r5, [pc, #52]	@ (8001560 <__libc_init_array+0x3c>)
 800152c:	1b64      	subs	r4, r4, r5
 800152e:	10a4      	asrs	r4, r4, #2
 8001530:	42a6      	cmp	r6, r4
 8001532:	d109      	bne.n	8001548 <__libc_init_array+0x24>
 8001534:	2600      	movs	r6, #0
 8001536:	f000 f819 	bl	800156c <_init>
 800153a:	4c0a      	ldr	r4, [pc, #40]	@ (8001564 <__libc_init_array+0x40>)
 800153c:	4d0a      	ldr	r5, [pc, #40]	@ (8001568 <__libc_init_array+0x44>)
 800153e:	1b64      	subs	r4, r4, r5
 8001540:	10a4      	asrs	r4, r4, #2
 8001542:	42a6      	cmp	r6, r4
 8001544:	d105      	bne.n	8001552 <__libc_init_array+0x2e>
 8001546:	bd70      	pop	{r4, r5, r6, pc}
 8001548:	00b3      	lsls	r3, r6, #2
 800154a:	58eb      	ldr	r3, [r5, r3]
 800154c:	4798      	blx	r3
 800154e:	3601      	adds	r6, #1
 8001550:	e7ee      	b.n	8001530 <__libc_init_array+0xc>
 8001552:	00b3      	lsls	r3, r6, #2
 8001554:	58eb      	ldr	r3, [r5, r3]
 8001556:	4798      	blx	r3
 8001558:	3601      	adds	r6, #1
 800155a:	e7f2      	b.n	8001542 <__libc_init_array+0x1e>
 800155c:	080015b4 	.word	0x080015b4
 8001560:	080015b4 	.word	0x080015b4
 8001564:	080015b8 	.word	0x080015b8
 8001568:	080015b4 	.word	0x080015b4

0800156c <_init>:
 800156c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800156e:	46c0      	nop			@ (mov r8, r8)
 8001570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001572:	bc08      	pop	{r3}
 8001574:	469e      	mov	lr, r3
 8001576:	4770      	bx	lr

08001578 <_fini>:
 8001578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800157a:	46c0      	nop			@ (mov r8, r8)
 800157c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800157e:	bc08      	pop	{r3}
 8001580:	469e      	mov	lr, r3
 8001582:	4770      	bx	lr
